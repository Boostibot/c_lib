#ifndef MODULE_UNICODE
#define MODULE_UNICODE

#include <stdint.h>
#include <stdlib.h>

//This file deals with chacking wheter a given codepoint lies in some common category. 
//The second half of the file was generated from DerivedGeneralCategory.txt (see below).

//Other useful unicode files include:
// General page: https://www.unicode.org/versions/Unicode16.0.0/#Code_Charts
// DerivedGeneralCategory.txt: https://www.unicode.org/Public/16.0.0/ucd/extracted/DerivedGeneralCategory.txt
// UnicodeData.txt: https://www.unicode.org/Public/16.0.0/ucd/UnicodeData.txt
// PropertyAliases.txt: https://www.unicode.org/Public/16.0.0/ucd/PropertyAliases.txt

#ifndef EXTERNAL
    #define EXTERNAL 
#endif

#define UNICODE_ASCII_MAX     0x7F
#define UNICODE_MAX           0x10FFFF //maximum value of unicode codepoint - anything greater is invalid 
#define UNICODE_REPLACEMENT   0xFFFD   //unicode value which should be used for badly parsed encoding

typedef struct Unicode_Range{
    uint32_t from;
    uint32_t to;
} Unicode_Range;

extern Unicode_Range UNICODE_RANGE_UNASSIGNED[731];     //Unassigned
extern Unicode_Range UNICODE_RANGE_UPPERCASE[651];      //Uppercase_Letter
extern Unicode_Range UNICODE_RANGE_LOWERCASE[662];      //Lowercase_Letter
extern Unicode_Range UNICODE_RANGE_TITLECASE[10];       //Titlecase_Letter
extern Unicode_Range UNICODE_RANGE_MODIFIER_LETTER[75]; //Modifier_Letter
extern Unicode_Range UNICODE_RANGE_OTHER_LETTER[528];   //Other_Letter
extern Unicode_Range UNICODE_RANGE_DECIMAL_NUMBER[71];  //Decimal_Number
extern Unicode_Range UNICODE_RANGE_LETTER_NUMBER[12];   //Letter_Number
extern Unicode_Range UNICODE_RANGE_ALPHABETIC[601];    //Uppercase_Letter, Lowercase_Letter, Titlecase_Letter, Modifier_Letter, Other_Letter
extern Unicode_Range UNICODE_RANGE_SPACE[8];            //Space_Separator, Line_Separator, Paragraph_Separator

//Functions checking whether a codepoint lies within the appropriate range. 
//All of them have a fast path for ASCII and then fall back on binary search.
EXTERNAL bool unicode_is_alpha(uint32_t codepoint);
EXTERNAL bool unicode_is_space(uint32_t codepoint);
EXTERNAL bool unicode_is_upper(uint32_t codepoint);
EXTERNAL bool unicode_is_lower(uint32_t codepoint);
EXTERNAL bool unicode_is_title(uint32_t codepoint);
EXTERNAL bool unicode_is_digit(uint32_t codepoint);
EXTERNAL bool unicode_is_unassigned(uint32_t codepoint);
EXTERNAL bool unicode_is_modifier_letter(uint32_t codepoint);
EXTERNAL bool unicode_is_other_letter(uint32_t codepoint);

//Binary searches the ranges for codepoint. 
//Returns index of the range specific range which contains the codepoint or -1 if not found
EXTERNAL int32_t unicode_range_search(uint32_t codepoint, const Unicode_Range* ranges, int32_t count);

//Making the generated section of this file
EXTERNAL bool unicode_format_ranges_file(const char* in, const char* out);
EXTERNAL void unicode_parse_table(const char* data, size_t size, const char* category_name, Unicode_Range** parsed, size_t* parsed_count, size_t* parsed_capacity);
EXTERNAL void unicode_format_append_ranges(FILE* file, char* file_data, size_t file_size, const char* name, const char* categories);

#endif

#if (defined(MODULE_IMPL_ALL) || defined(MODULE_IMPL_UNICODE)) && !defined(MODULE_HAS_IMPL_UNICODE)
#define MODULE_HAS_IMPL_UNICODE

#ifndef ASSERT
    #include <assert.h>
    #define ASSERT(x, ...) assert(x)
#endif

EXTERNAL int32_t unicode_range_search(uint32_t codepoint, const Unicode_Range* ranges, int32_t ranges_count)
{
    if(ranges_count <= 0 || ranges[0].from > codepoint || codepoint > ranges[ranges_count - 1].to)
        return -1;

    //serach for first low_i such that codepoint <= ranges[low_i].to
	int64_t low_i = 0;
	int64_t count = ranges_count;
	while (count > 0) {
	    ASSERT(0 <= low_i && low_i < ranges_count);

		int64_t step = count / 2;
		int64_t curr = low_i + step;
		if(ranges[curr].to < codepoint)
		{
			low_i = curr + 1;
			count -= step + 1;
		}
		else
			count = step;
	}
		
	ASSERT(codepoint <= ranges[low_i].to);
    if(codepoint < ranges[low_i].from) 
        return -1;

    return (int32_t) low_i;
}

EXTERNAL bool unicode_is_alpha(uint32_t codepoint) { 
    if(codepoint <= UNICODE_ASCII_MAX) {
        //see string.h for explanation
        unsigned masked = (unsigned) (codepoint - 'A') & ~(1u << 5);
        return masked <= 'Z' - 'A';
    }
    return unicode_range_search(codepoint, 
        UNICODE_RANGE_ALPHABETIC, sizeof(UNICODE_RANGE_ALPHABETIC)/sizeof(Unicode_Range)) != -1;
}

EXTERNAL bool unicode_is_space(uint32_t codepoint) { 
    if(codepoint <= UNICODE_ASCII_MAX) {
        uint32_t c = codepoint;
        return c == ' ' || c == '\n' || c == '\t' || c == '\r' || c == '\v' || c == '\f';
    }
    return unicode_range_search(codepoint, 
        UNICODE_RANGE_SPACE, sizeof(UNICODE_RANGE_SPACE)/sizeof(Unicode_Range)) != -1;
}

EXTERNAL bool unicode_is_upper(uint32_t codepoint) { 
    if(codepoint <= UNICODE_ASCII_MAX) 
        return 'A' <= codepoint && codepoint <= 'Z';

    return unicode_range_search(codepoint, 
        UNICODE_RANGE_UPPERCASE, sizeof(UNICODE_RANGE_UPPERCASE)/sizeof(Unicode_Range)) != -1;
}

EXTERNAL bool unicode_is_lower(uint32_t codepoint) { 
    if(codepoint <= UNICODE_ASCII_MAX) 
        return 'a' <= codepoint && codepoint <= 'z';
    
    return unicode_range_search(codepoint, 
        UNICODE_RANGE_LOWERCASE, sizeof(UNICODE_RANGE_LOWERCASE)/sizeof(Unicode_Range)) != -1;
}

EXTERNAL bool unicode_is_digit(uint32_t codepoint) {
    if(codepoint <= UNICODE_ASCII_MAX) 
        return '0' <= codepoint && codepoint <= '9';
    
    return unicode_range_search(codepoint, 
        UNICODE_RANGE_DECIMAL_NUMBER, sizeof(UNICODE_RANGE_DECIMAL_NUMBER)/sizeof(Unicode_Range)) != -1;
}

EXTERNAL bool unicode_is_title(uint32_t codepoint) { 
    if(codepoint <= UNICODE_ASCII_MAX) 
        return false;
    return unicode_range_search(codepoint, 
        UNICODE_RANGE_TITLECASE, sizeof(UNICODE_RANGE_TITLECASE)/sizeof(Unicode_Range)) != -1;
}

EXTERNAL bool unicode_is_unassigned(uint32_t codepoint) { 
    if(codepoint <= UNICODE_ASCII_MAX) 
        return false; 

    return unicode_range_search(codepoint, 
        UNICODE_RANGE_UNASSIGNED, sizeof(UNICODE_RANGE_UNASSIGNED)/sizeof(Unicode_Range)) != -1;
}

EXTERNAL bool unicode_is_modifier_letter(uint32_t codepoint) { 
    if(codepoint <= UNICODE_ASCII_MAX) 
        return false; 

    return unicode_range_search(codepoint, 
        UNICODE_RANGE_MODIFIER_LETTER, sizeof(UNICODE_RANGE_MODIFIER_LETTER)/sizeof(Unicode_Range)) != -1;
}
EXTERNAL bool unicode_is_other_letter(uint32_t codepoint) { 
    if(codepoint <= UNICODE_ASCII_MAX) 
        return false; 

    return unicode_range_search(codepoint, 
        UNICODE_RANGE_OTHER_LETTER, sizeof(UNICODE_RANGE_OTHER_LETTER)/sizeof(Unicode_Range)) != -1;
}


#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>
#ifndef INTERNAL
    #define INTERNAL static
#endif

EXTERNAL void unicode_parse_table(const char* data, size_t size, const char* category_name, Unicode_Range** parsed, size_t* parsed_count, size_t* parsed_capacity)
{
    //read the file line by line
    long i = 0;
    long line_num = 1;
    for(; i < size; line_num++) {
        //skip end of line space, newlines etc.
        for(; i < size && isspace(data[i]); i++);
        long line_start = i;
        long line_end = i;
        for(; line_end < size && data[line_end] != '\n'; line_end++);

        if(data[line_start] != '#') {
            //find next ;
            for(; i < line_end && data[i] != ';'; i++);

            //if we found it
            if(i + 4 < line_end && data[i] == ';') {
                //if the category_name name matches
                char code[3] = {data[i+2], data[i+3], 0};
                if(strcmp(code, category_name) == 0) {
                            
                    //do the actual parsing
                    unsigned long long codepoint_from = 0;
                    unsigned long long codepoint_to = 0;
                    int parsed_numbers = sscanf(data + line_start, "%llx..%llx", &codepoint_from, &codepoint_to);
                    if(parsed_numbers == 0)
                        fprintf(stderr, "unicode_parse_table: error couldn't parse hex code one line %li '%.*s'\n", line_num, (int) (line_end - line_start), data + line_start);
                    else
                    {
                        if(parsed_numbers == 1)
                            codepoint_to = codepoint_from;

                        Unicode_Range range = {(uint32_t) codepoint_from, (uint32_t) codepoint_to};
                        //push to the results
                        if(*parsed == NULL || *parsed_count >= *parsed_capacity) {
                            size_t new_cap = (*parsed_capacity)*3/2 + 8;
                            *parsed = (Unicode_Range*) realloc(*parsed, new_cap*sizeof(Unicode_Range));
                            *parsed_capacity = new_cap;
                        }
                        (*parsed)[(*parsed_count) ++] = range;
                    }
                }
            }
        }
        i = line_end;
    }
}

INTERNAL int _unicode_range_compare(const void* a, const void* b)
{
    uint32_t af = ((Unicode_Range*) a)->from;
    uint32_t bf = ((Unicode_Range*) b)->from;
    return (af > bf) - (af < bf);
}

EXTERNAL void unicode_format_append_ranges(FILE* file, char* file_data, size_t file_size, const char* name, const char* categories)
{
    Unicode_Range* parsed = NULL;
    size_t parsed_count = 0;
    size_t parsed_capacity = 0;

    //add all categories from the comma separated categories list
    char cat[256] = {0};
    size_t len = categories ? strlen(categories) : 0;
    for(size_t i = 0; i < len; i++) {
        size_t before = i;
        for(; i < len && categories[i] != ','; i++);

        size_t size = i - before;
        if(size > sizeof(cat))
            size = sizeof(cat);

        memcpy(cat, categories + before, size); cat[size] = '\0';
        unicode_parse_table(file_data, file_size, cat, &parsed, &parsed_count, &parsed_capacity);
    }

    qsort(parsed, parsed_count, sizeof *parsed, _unicode_range_compare);
    
    //merge neighboring/overlapping ranges
    Unicode_Range* merged = calloc(parsed_count, sizeof *parsed);
    size_t merged_count = 0;
    for(size_t i = 0; i < parsed_count; i++) {
        Unicode_Range curr = parsed[i];
        Unicode_Range* prev = &merged[merged_count - 1];
        if(merged_count > 0 && prev->from <= curr.from && curr.from <= prev->to + 1) 
            prev->to = prev->to > curr.to ? prev->to : curr.to;
        else
            merged[merged_count++] = curr;
    }

    //sort again for good measure 
    qsort(merged, merged_count, sizeof *merged, _unicode_range_compare);

    ASSERT(merged_count <= parsed_count);
    printf("for %s (%s) merged %i ranges\n", name, categories, (int) (parsed_count - merged_count));

    fprintf(file, "Unicode_Range %s[%lli] = { //%s\n", name, (long long) merged_count, categories);
    for(size_t i = 0; i < merged_count;) {
        fprintf(file, "    ");
        for(int j = 0; j < 8 && i < merged_count; j++, i++)
            fprintf(file, "0x%04lx,0x%04lx, ", merged[i].from, merged[i].to);
        fprintf(file, "\n");
    }
    fprintf(file, "};//%s - %s\n\n", name, categories);
    free(parsed);
    free(merged);
}

#include <errno.h>
INTERNAL bool _unicode_read_entire_file(const char* in, char** read_file, size_t* read_size)
{
    bool state = false;
    FILE* in_file = fopen(in, "rb");

    if(in_file == NULL)
        fprintf(stderr, "unicode_read_entire_file: error couldn't open file in file '%s' error: %s\n", in, strerror(errno));
        
    if(in_file) {
        //get the size of the file
        fseek(in_file, 0, SEEK_END);
        long size = ftell(in_file);
        fseek(in_file, 0, SEEK_SET);
        if(size < 0) 
            size = 0;

        //make some space and alloc all of it
        char* data = (char*) malloc(size + 1);
        size_t read = data ? fread(data, 1, size, in_file) : 0;
        if(data == NULL)
            fprintf(stderr, "unicode_read_entire_file: error couldn't malloc entire in file '%s' error: %s\n", in, strerror(errno));
        else if(read != (size_t) size)
            fprintf(stderr, "unicode_read_entire_file: error couldn't read entire in file '%s' error: %s\n", in, strerror(errno));
        else {
            data[size] = '\0';
            *read_file = data;
            *read_size = size;
            state = true;
        }
    }

    if(in_file) fclose(in_file);
    return state;
}

EXTERNAL bool unicode_format_ranges_file(const char* in, const char* out)
{
    bool state = false;
    FILE* out_file = fopen(out, "wb");
    if(out_file == NULL)
        fprintf(stderr, "produce_relevant_tables: error couldn't open file out file '%s' error: %s\n", out, strerror(errno));
    else
    {
        char* file_data = NULL;
        size_t file_size = 0;
        if(_unicode_read_entire_file(in, &file_data, &file_size))
        {
            unicode_format_append_ranges(out_file, file_data, file_size, "UNICODE_RANGE_UNASSIGNED",      "Cn");
            unicode_format_append_ranges(out_file, file_data, file_size, "UNICODE_RANGE_UPPERCASE",       "Lu");
            unicode_format_append_ranges(out_file, file_data, file_size, "UNICODE_RANGE_LOWERCASE",       "Ll");
            unicode_format_append_ranges(out_file, file_data, file_size, "UNICODE_RANGE_TITLECASE",       "Lt");
            unicode_format_append_ranges(out_file, file_data, file_size, "UNICODE_RANGE_MODIFIER_LETTER", "Lm");
            unicode_format_append_ranges(out_file, file_data, file_size, "UNICODE_RANGE_OTHER_LETTER",    "Lo");
            unicode_format_append_ranges(out_file, file_data, file_size, "UNICODE_RANGE_DECIMAL_NUMBER",  "Nd");
            unicode_format_append_ranges(out_file, file_data, file_size, "UNICODE_RANGE_LETTER_NUMBER",   "Nl");
            unicode_format_append_ranges(out_file, file_data, file_size, "UNICODE_RANGE_ALPHABETIC",      "Cn,Lu,Ll,Lt,Lm,Lo");
            unicode_format_append_ranges(out_file, file_data, file_size, "UNICODE_RANGE_SPACE",           "Zs,Zl,Zp");
            state = true;
        }
        free(file_data);
    }

    if(out_file)
        fclose(out_file);
    return state;
}

//=========================================================================
//The reminder of the file is generated by the script above.
//You should probably not be modifying it
//=========================================================================
Unicode_Range UNICODE_RANGE_UNASSIGNED[731] = { //Cn
    0x0378,0x0379, 0x0380,0x0383, 0x038b,0x038b, 0x038d,0x038d, 0x03a2,0x03a2, 0x0530,0x0530, 0x0557,0x0558, 0x058b,0x058c, 
    0x0590,0x0590, 0x05c8,0x05cf, 0x05eb,0x05ee, 0x05f5,0x05ff, 0x070e,0x070e, 0x074b,0x074c, 0x07b2,0x07bf, 0x07fb,0x07fc, 
    0x082e,0x082f, 0x083f,0x083f, 0x085c,0x085d, 0x085f,0x085f, 0x086b,0x086f, 0x088f,0x088f, 0x0892,0x0896, 0x0984,0x0984, 
    0x098d,0x098e, 0x0991,0x0992, 0x09a9,0x09a9, 0x09b1,0x09b1, 0x09b3,0x09b5, 0x09ba,0x09bb, 0x09c5,0x09c6, 0x09c9,0x09ca, 
    0x09cf,0x09d6, 0x09d8,0x09db, 0x09de,0x09de, 0x09e4,0x09e5, 0x09ff,0x0a00, 0x0a04,0x0a04, 0x0a0b,0x0a0e, 0x0a11,0x0a12, 
    0x0a29,0x0a29, 0x0a31,0x0a31, 0x0a34,0x0a34, 0x0a37,0x0a37, 0x0a3a,0x0a3b, 0x0a3d,0x0a3d, 0x0a43,0x0a46, 0x0a49,0x0a4a, 
    0x0a4e,0x0a50, 0x0a52,0x0a58, 0x0a5d,0x0a5d, 0x0a5f,0x0a65, 0x0a77,0x0a80, 0x0a84,0x0a84, 0x0a8e,0x0a8e, 0x0a92,0x0a92, 
    0x0aa9,0x0aa9, 0x0ab1,0x0ab1, 0x0ab4,0x0ab4, 0x0aba,0x0abb, 0x0ac6,0x0ac6, 0x0aca,0x0aca, 0x0ace,0x0acf, 0x0ad1,0x0adf, 
    0x0ae4,0x0ae5, 0x0af2,0x0af8, 0x0b00,0x0b00, 0x0b04,0x0b04, 0x0b0d,0x0b0e, 0x0b11,0x0b12, 0x0b29,0x0b29, 0x0b31,0x0b31, 
    0x0b34,0x0b34, 0x0b3a,0x0b3b, 0x0b45,0x0b46, 0x0b49,0x0b4a, 0x0b4e,0x0b54, 0x0b58,0x0b5b, 0x0b5e,0x0b5e, 0x0b64,0x0b65, 
    0x0b78,0x0b81, 0x0b84,0x0b84, 0x0b8b,0x0b8d, 0x0b91,0x0b91, 0x0b96,0x0b98, 0x0b9b,0x0b9b, 0x0b9d,0x0b9d, 0x0ba0,0x0ba2, 
    0x0ba5,0x0ba7, 0x0bab,0x0bad, 0x0bba,0x0bbd, 0x0bc3,0x0bc5, 0x0bc9,0x0bc9, 0x0bce,0x0bcf, 0x0bd1,0x0bd6, 0x0bd8,0x0be5, 
    0x0bfb,0x0bff, 0x0c0d,0x0c0d, 0x0c11,0x0c11, 0x0c29,0x0c29, 0x0c3a,0x0c3b, 0x0c45,0x0c45, 0x0c49,0x0c49, 0x0c4e,0x0c54, 
    0x0c57,0x0c57, 0x0c5b,0x0c5c, 0x0c5e,0x0c5f, 0x0c64,0x0c65, 0x0c70,0x0c76, 0x0c8d,0x0c8d, 0x0c91,0x0c91, 0x0ca9,0x0ca9, 
    0x0cb4,0x0cb4, 0x0cba,0x0cbb, 0x0cc5,0x0cc5, 0x0cc9,0x0cc9, 0x0cce,0x0cd4, 0x0cd7,0x0cdc, 0x0cdf,0x0cdf, 0x0ce4,0x0ce5, 
    0x0cf0,0x0cf0, 0x0cf4,0x0cff, 0x0d0d,0x0d0d, 0x0d11,0x0d11, 0x0d45,0x0d45, 0x0d49,0x0d49, 0x0d50,0x0d53, 0x0d64,0x0d65, 
    0x0d80,0x0d80, 0x0d84,0x0d84, 0x0d97,0x0d99, 0x0db2,0x0db2, 0x0dbc,0x0dbc, 0x0dbe,0x0dbf, 0x0dc7,0x0dc9, 0x0dcb,0x0dce, 
    0x0dd5,0x0dd5, 0x0dd7,0x0dd7, 0x0de0,0x0de5, 0x0df0,0x0df1, 0x0df5,0x0e00, 0x0e3b,0x0e3e, 0x0e5c,0x0e80, 0x0e83,0x0e83, 
    0x0e85,0x0e85, 0x0e8b,0x0e8b, 0x0ea4,0x0ea4, 0x0ea6,0x0ea6, 0x0ebe,0x0ebf, 0x0ec5,0x0ec5, 0x0ec7,0x0ec7, 0x0ecf,0x0ecf, 
    0x0eda,0x0edb, 0x0ee0,0x0eff, 0x0f48,0x0f48, 0x0f6d,0x0f70, 0x0f98,0x0f98, 0x0fbd,0x0fbd, 0x0fcd,0x0fcd, 0x0fdb,0x0fff, 
    0x10c6,0x10c6, 0x10c8,0x10cc, 0x10ce,0x10cf, 0x1249,0x1249, 0x124e,0x124f, 0x1257,0x1257, 0x1259,0x1259, 0x125e,0x125f, 
    0x1289,0x1289, 0x128e,0x128f, 0x12b1,0x12b1, 0x12b6,0x12b7, 0x12bf,0x12bf, 0x12c1,0x12c1, 0x12c6,0x12c7, 0x12d7,0x12d7, 
    0x1311,0x1311, 0x1316,0x1317, 0x135b,0x135c, 0x137d,0x137f, 0x139a,0x139f, 0x13f6,0x13f7, 0x13fe,0x13ff, 0x169d,0x169f, 
    0x16f9,0x16ff, 0x1716,0x171e, 0x1737,0x173f, 0x1754,0x175f, 0x176d,0x176d, 0x1771,0x1771, 0x1774,0x177f, 0x17de,0x17df, 
    0x17ea,0x17ef, 0x17fa,0x17ff, 0x181a,0x181f, 0x1879,0x187f, 0x18ab,0x18af, 0x18f6,0x18ff, 0x191f,0x191f, 0x192c,0x192f, 
    0x193c,0x193f, 0x1941,0x1943, 0x196e,0x196f, 0x1975,0x197f, 0x19ac,0x19af, 0x19ca,0x19cf, 0x19db,0x19dd, 0x1a1c,0x1a1d, 
    0x1a5f,0x1a5f, 0x1a7d,0x1a7e, 0x1a8a,0x1a8f, 0x1a9a,0x1a9f, 0x1aae,0x1aaf, 0x1acf,0x1aff, 0x1b4d,0x1b4d, 0x1bf4,0x1bfb, 
    0x1c38,0x1c3a, 0x1c4a,0x1c4c, 0x1c8b,0x1c8f, 0x1cbb,0x1cbc, 0x1cc8,0x1ccf, 0x1cfb,0x1cff, 0x1f16,0x1f17, 0x1f1e,0x1f1f, 
    0x1f46,0x1f47, 0x1f4e,0x1f4f, 0x1f58,0x1f58, 0x1f5a,0x1f5a, 0x1f5c,0x1f5c, 0x1f5e,0x1f5e, 0x1f7e,0x1f7f, 0x1fb5,0x1fb5, 
    0x1fc5,0x1fc5, 0x1fd4,0x1fd5, 0x1fdc,0x1fdc, 0x1ff0,0x1ff1, 0x1ff5,0x1ff5, 0x1fff,0x1fff, 0x2065,0x2065, 0x2072,0x2073, 
    0x208f,0x208f, 0x209d,0x209f, 0x20c1,0x20cf, 0x20f1,0x20ff, 0x218c,0x218f, 0x242a,0x243f, 0x244b,0x245f, 0x2b74,0x2b75, 
    0x2b96,0x2b96, 0x2cf4,0x2cf8, 0x2d26,0x2d26, 0x2d28,0x2d2c, 0x2d2e,0x2d2f, 0x2d68,0x2d6e, 0x2d71,0x2d7e, 0x2d97,0x2d9f, 
    0x2da7,0x2da7, 0x2daf,0x2daf, 0x2db7,0x2db7, 0x2dbf,0x2dbf, 0x2dc7,0x2dc7, 0x2dcf,0x2dcf, 0x2dd7,0x2dd7, 0x2ddf,0x2ddf, 
    0x2e5e,0x2e7f, 0x2e9a,0x2e9a, 0x2ef4,0x2eff, 0x2fd6,0x2fef, 0x3040,0x3040, 0x3097,0x3098, 0x3100,0x3104, 0x3130,0x3130, 
    0x318f,0x318f, 0x31e6,0x31ee, 0x321f,0x321f, 0xa48d,0xa48f, 0xa4c7,0xa4cf, 0xa62c,0xa63f, 0xa6f8,0xa6ff, 0xa7ce,0xa7cf, 
    0xa7d2,0xa7d2, 0xa7d4,0xa7d4, 0xa7dd,0xa7f1, 0xa82d,0xa82f, 0xa83a,0xa83f, 0xa878,0xa87f, 0xa8c6,0xa8cd, 0xa8da,0xa8df, 
    0xa954,0xa95e, 0xa97d,0xa97f, 0xa9ce,0xa9ce, 0xa9da,0xa9dd, 0xa9ff,0xa9ff, 0xaa37,0xaa3f, 0xaa4e,0xaa4f, 0xaa5a,0xaa5b, 
    0xaac3,0xaada, 0xaaf7,0xab00, 0xab07,0xab08, 0xab0f,0xab10, 0xab17,0xab1f, 0xab27,0xab27, 0xab2f,0xab2f, 0xab6c,0xab6f, 
    0xabee,0xabef, 0xabfa,0xabff, 0xd7a4,0xd7af, 0xd7c7,0xd7ca, 0xd7fc,0xd7ff, 0xfa6e,0xfa6f, 0xfada,0xfaff, 0xfb07,0xfb12, 
    0xfb18,0xfb1c, 0xfb37,0xfb37, 0xfb3d,0xfb3d, 0xfb3f,0xfb3f, 0xfb42,0xfb42, 0xfb45,0xfb45, 0xfbc3,0xfbd2, 0xfd90,0xfd91, 
    0xfdc8,0xfdce, 0xfdd0,0xfdef, 0xfe1a,0xfe1f, 0xfe53,0xfe53, 0xfe67,0xfe67, 0xfe6c,0xfe6f, 0xfe75,0xfe75, 0xfefd,0xfefe, 
    0xff00,0xff00, 0xffbf,0xffc1, 0xffc8,0xffc9, 0xffd0,0xffd1, 0xffd8,0xffd9, 0xffdd,0xffdf, 0xffe7,0xffe7, 0xffef,0xfff8, 
    0xfffe,0xffff, 0x1000c,0x1000c, 0x10027,0x10027, 0x1003b,0x1003b, 0x1003e,0x1003e, 0x1004e,0x1004f, 0x1005e,0x1007f, 0x100fb,0x100ff, 
    0x10103,0x10106, 0x10134,0x10136, 0x1018f,0x1018f, 0x1019d,0x1019f, 0x101a1,0x101cf, 0x101fe,0x1027f, 0x1029d,0x1029f, 0x102d1,0x102df, 
    0x102fc,0x102ff, 0x10324,0x1032c, 0x1034b,0x1034f, 0x1037b,0x1037f, 0x1039e,0x1039e, 0x103c4,0x103c7, 0x103d6,0x103ff, 0x1049e,0x1049f, 
    0x104aa,0x104af, 0x104d4,0x104d7, 0x104fc,0x104ff, 0x10528,0x1052f, 0x10564,0x1056e, 0x1057b,0x1057b, 0x1058b,0x1058b, 0x10593,0x10593, 
    0x10596,0x10596, 0x105a2,0x105a2, 0x105b2,0x105b2, 0x105ba,0x105ba, 0x105bd,0x105bf, 0x105f4,0x105ff, 0x10737,0x1073f, 0x10756,0x1075f, 
    0x10768,0x1077f, 0x10786,0x10786, 0x107b1,0x107b1, 0x107bb,0x107ff, 0x10806,0x10807, 0x10809,0x10809, 0x10836,0x10836, 0x10839,0x1083b, 
    0x1083d,0x1083e, 0x10856,0x10856, 0x1089f,0x108a6, 0x108b0,0x108df, 0x108f3,0x108f3, 0x108f6,0x108fa, 0x1091c,0x1091e, 0x1093a,0x1093e, 
    0x10940,0x1097f, 0x109b8,0x109bb, 0x109d0,0x109d1, 0x10a04,0x10a04, 0x10a07,0x10a0b, 0x10a14,0x10a14, 0x10a18,0x10a18, 0x10a36,0x10a37, 
    0x10a3b,0x10a3e, 0x10a49,0x10a4f, 0x10a59,0x10a5f, 0x10aa0,0x10abf, 0x10ae7,0x10aea, 0x10af7,0x10aff, 0x10b36,0x10b38, 0x10b56,0x10b57, 
    0x10b73,0x10b77, 0x10b92,0x10b98, 0x10b9d,0x10ba8, 0x10bb0,0x10bff, 0x10c49,0x10c7f, 0x10cb3,0x10cbf, 0x10cf3,0x10cf9, 0x10d28,0x10d2f, 
    0x10d3a,0x10d3f, 0x10d66,0x10d68, 0x10d86,0x10d8d, 0x10d90,0x10e5f, 0x10e7f,0x10e7f, 0x10eaa,0x10eaa, 0x10eae,0x10eaf, 0x10eb2,0x10ec1, 
    0x10ec5,0x10efb, 0x10f28,0x10f2f, 0x10f5a,0x10f6f, 0x10f8a,0x10faf, 0x10fcc,0x10fdf, 0x10ff7,0x10fff, 0x1104e,0x11051, 0x11076,0x1107e, 
    0x110c3,0x110cc, 0x110ce,0x110cf, 0x110e9,0x110ef, 0x110fa,0x110ff, 0x11135,0x11135, 0x11148,0x1114f, 0x11177,0x1117f, 0x111e0,0x111e0, 
    0x111f5,0x111ff, 0x11212,0x11212, 0x11242,0x1127f, 0x11287,0x11287, 0x11289,0x11289, 0x1128e,0x1128e, 0x1129e,0x1129e, 0x112aa,0x112af, 
    0x112eb,0x112ef, 0x112fa,0x112ff, 0x11304,0x11304, 0x1130d,0x1130e, 0x11311,0x11312, 0x11329,0x11329, 0x11331,0x11331, 0x11334,0x11334, 
    0x1133a,0x1133a, 0x11345,0x11346, 0x11349,0x1134a, 0x1134e,0x1134f, 0x11351,0x11356, 0x11358,0x1135c, 0x11364,0x11365, 0x1136d,0x1136f, 
    0x11375,0x1137f, 0x1138a,0x1138a, 0x1138c,0x1138d, 0x1138f,0x1138f, 0x113b6,0x113b6, 0x113c1,0x113c1, 0x113c3,0x113c4, 0x113c6,0x113c6, 
    0x113cb,0x113cb, 0x113d6,0x113d6, 0x113d9,0x113e0, 0x113e3,0x113ff, 0x1145c,0x1145c, 0x11462,0x1147f, 0x114c8,0x114cf, 0x114da,0x1157f, 
    0x115b6,0x115b7, 0x115de,0x115ff, 0x11645,0x1164f, 0x1165a,0x1165f, 0x1166d,0x1167f, 0x116ba,0x116bf, 0x116ca,0x116cf, 0x116e4,0x116ff, 
    0x1171b,0x1171c, 0x1172c,0x1172f, 0x11747,0x117ff, 0x1183c,0x1189f, 0x118f3,0x118fe, 0x11907,0x11908, 0x1190a,0x1190b, 0x11914,0x11914, 
    0x11917,0x11917, 0x11936,0x11936, 0x11939,0x1193a, 0x11947,0x1194f, 0x1195a,0x1199f, 0x119a8,0x119a9, 0x119d8,0x119d9, 0x119e5,0x119ff, 
    0x11a48,0x11a4f, 0x11aa3,0x11aaf, 0x11af9,0x11aff, 0x11b0a,0x11bbf, 0x11be2,0x11bef, 0x11bfa,0x11bff, 0x11c09,0x11c09, 0x11c37,0x11c37, 
    0x11c46,0x11c4f, 0x11c6d,0x11c6f, 0x11c90,0x11c91, 0x11ca8,0x11ca8, 0x11cb7,0x11cff, 0x11d07,0x11d07, 0x11d0a,0x11d0a, 0x11d37,0x11d39, 
    0x11d3b,0x11d3b, 0x11d3e,0x11d3e, 0x11d48,0x11d4f, 0x11d5a,0x11d5f, 0x11d66,0x11d66, 0x11d69,0x11d69, 0x11d8f,0x11d8f, 0x11d92,0x11d92, 
    0x11d99,0x11d9f, 0x11daa,0x11edf, 0x11ef9,0x11eff, 0x11f11,0x11f11, 0x11f3b,0x11f3d, 0x11f5b,0x11faf, 0x11fb1,0x11fbf, 0x11ff2,0x11ffe, 
    0x1239a,0x123ff, 0x1246f,0x1246f, 0x12475,0x1247f, 0x12544,0x12f8f, 0x12ff3,0x12fff, 0x13456,0x1345f, 0x143fb,0x143ff, 0x14647,0x160ff, 
    0x1613a,0x167ff, 0x16a39,0x16a3f, 0x16a5f,0x16a5f, 0x16a6a,0x16a6d, 0x16abf,0x16abf, 0x16aca,0x16acf, 0x16aee,0x16aef, 0x16af6,0x16aff, 
    0x16b46,0x16b4f, 0x16b5a,0x16b5a, 0x16b62,0x16b62, 0x16b78,0x16b7c, 0x16b90,0x16d3f, 0x16d7a,0x16e3f, 0x16e9b,0x16eff, 0x16f4b,0x16f4e, 
    0x16f88,0x16f8e, 0x16fa0,0x16fdf, 0x16fe5,0x16fef, 0x16ff2,0x16fff, 0x187f8,0x187ff, 0x18cd6,0x18cfe, 0x18d09,0x1afef, 0x1aff4,0x1aff4, 
    0x1affc,0x1affc, 0x1afff,0x1afff, 0x1b123,0x1b131, 0x1b133,0x1b14f, 0x1b153,0x1b154, 0x1b156,0x1b163, 0x1b168,0x1b16f, 0x1b2fc,0x1bbff, 
    0x1bc6b,0x1bc6f, 0x1bc7d,0x1bc7f, 0x1bc89,0x1bc8f, 0x1bc9a,0x1bc9b, 0x1bca4,0x1cbff, 0x1ccfa,0x1ccff, 0x1ceb4,0x1ceff, 0x1cf2e,0x1cf2f, 
    0x1cf47,0x1cf4f, 0x1cfc4,0x1cfff, 0x1d0f6,0x1d0ff, 0x1d127,0x1d128, 0x1d1eb,0x1d1ff, 0x1d246,0x1d2bf, 0x1d2d4,0x1d2df, 0x1d2f4,0x1d2ff, 
    0x1d357,0x1d35f, 0x1d379,0x1d3ff, 0x1d455,0x1d455, 0x1d49d,0x1d49d, 0x1d4a0,0x1d4a1, 0x1d4a3,0x1d4a4, 0x1d4a7,0x1d4a8, 0x1d4ad,0x1d4ad, 
    0x1d4ba,0x1d4ba, 0x1d4bc,0x1d4bc, 0x1d4c4,0x1d4c4, 0x1d506,0x1d506, 0x1d50b,0x1d50c, 0x1d515,0x1d515, 0x1d51d,0x1d51d, 0x1d53a,0x1d53a, 
    0x1d53f,0x1d53f, 0x1d545,0x1d545, 0x1d547,0x1d549, 0x1d551,0x1d551, 0x1d6a6,0x1d6a7, 0x1d7cc,0x1d7cd, 0x1da8c,0x1da9a, 0x1daa0,0x1daa0, 
    0x1dab0,0x1deff, 0x1df1f,0x1df24, 0x1df2b,0x1dfff, 0x1e007,0x1e007, 0x1e019,0x1e01a, 0x1e022,0x1e022, 0x1e025,0x1e025, 0x1e02b,0x1e02f, 
    0x1e06e,0x1e08e, 0x1e090,0x1e0ff, 0x1e12d,0x1e12f, 0x1e13e,0x1e13f, 0x1e14a,0x1e14d, 0x1e150,0x1e28f, 0x1e2af,0x1e2bf, 0x1e2fa,0x1e2fe, 
    0x1e300,0x1e4cf, 0x1e4fa,0x1e5cf, 0x1e5fb,0x1e5fe, 0x1e600,0x1e7df, 0x1e7e7,0x1e7e7, 0x1e7ec,0x1e7ec, 0x1e7ef,0x1e7ef, 0x1e7ff,0x1e7ff, 
    0x1e8c5,0x1e8c6, 0x1e8d7,0x1e8ff, 0x1e94c,0x1e94f, 0x1e95a,0x1e95d, 0x1e960,0x1ec70, 0x1ecb5,0x1ed00, 0x1ed3e,0x1edff, 0x1ee04,0x1ee04, 
    0x1ee20,0x1ee20, 0x1ee23,0x1ee23, 0x1ee25,0x1ee26, 0x1ee28,0x1ee28, 0x1ee33,0x1ee33, 0x1ee38,0x1ee38, 0x1ee3a,0x1ee3a, 0x1ee3c,0x1ee41, 
    0x1ee43,0x1ee46, 0x1ee48,0x1ee48, 0x1ee4a,0x1ee4a, 0x1ee4c,0x1ee4c, 0x1ee50,0x1ee50, 0x1ee53,0x1ee53, 0x1ee55,0x1ee56, 0x1ee58,0x1ee58, 
    0x1ee5a,0x1ee5a, 0x1ee5c,0x1ee5c, 0x1ee5e,0x1ee5e, 0x1ee60,0x1ee60, 0x1ee63,0x1ee63, 0x1ee65,0x1ee66, 0x1ee6b,0x1ee6b, 0x1ee73,0x1ee73, 
    0x1ee78,0x1ee78, 0x1ee7d,0x1ee7d, 0x1ee7f,0x1ee7f, 0x1ee8a,0x1ee8a, 0x1ee9c,0x1eea0, 0x1eea4,0x1eea4, 0x1eeaa,0x1eeaa, 0x1eebc,0x1eeef, 
    0x1eef2,0x1efff, 0x1f02c,0x1f02f, 0x1f094,0x1f09f, 0x1f0af,0x1f0b0, 0x1f0c0,0x1f0c0, 0x1f0d0,0x1f0d0, 0x1f0f6,0x1f0ff, 0x1f1ae,0x1f1e5, 
    0x1f203,0x1f20f, 0x1f23c,0x1f23f, 0x1f249,0x1f24f, 0x1f252,0x1f25f, 0x1f266,0x1f2ff, 0x1f6d8,0x1f6db, 0x1f6ed,0x1f6ef, 0x1f6fd,0x1f6ff, 
    0x1f777,0x1f77a, 0x1f7da,0x1f7df, 0x1f7ec,0x1f7ef, 0x1f7f1,0x1f7ff, 0x1f80c,0x1f80f, 0x1f848,0x1f84f, 0x1f85a,0x1f85f, 0x1f888,0x1f88f, 
    0x1f8ae,0x1f8af, 0x1f8bc,0x1f8bf, 0x1f8c2,0x1f8ff, 0x1fa54,0x1fa5f, 0x1fa6e,0x1fa6f, 0x1fa7d,0x1fa7f, 0x1fa8a,0x1fa8e, 0x1fac7,0x1facd, 
    0x1fadd,0x1fade, 0x1faea,0x1faef, 0x1faf9,0x1faff, 0x1fb93,0x1fb93, 0x1fbfa,0x1ffff, 0x2a6e0,0x2a6ff, 0x2b73a,0x2b73f, 0x2b81e,0x2b81f, 
    0x2cea2,0x2ceaf, 0x2ebe1,0x2ebef, 0x2ee5e,0x2f7ff, 0x2fa1e,0x2ffff, 0x3134b,0x3134f, 0x323b0,0xe0000, 0xe0002,0xe001f, 0xe0080,0xe00ff, 
    0xe01f0,0xeffff, 0xffffe,0xfffff, 0x10fffe,0x10ffff, 
};//UNICODE_RANGE_UNASSIGNED - Cn

Unicode_Range UNICODE_RANGE_UPPERCASE[651] = { //Lu
    0x0041,0x005a, 0x00c0,0x00d6, 0x00d8,0x00de, 0x0100,0x0100, 0x0102,0x0102, 0x0104,0x0104, 0x0106,0x0106, 0x0108,0x0108, 
    0x010a,0x010a, 0x010c,0x010c, 0x010e,0x010e, 0x0110,0x0110, 0x0112,0x0112, 0x0114,0x0114, 0x0116,0x0116, 0x0118,0x0118, 
    0x011a,0x011a, 0x011c,0x011c, 0x011e,0x011e, 0x0120,0x0120, 0x0122,0x0122, 0x0124,0x0124, 0x0126,0x0126, 0x0128,0x0128, 
    0x012a,0x012a, 0x012c,0x012c, 0x012e,0x012e, 0x0130,0x0130, 0x0132,0x0132, 0x0134,0x0134, 0x0136,0x0136, 0x0139,0x0139, 
    0x013b,0x013b, 0x013d,0x013d, 0x013f,0x013f, 0x0141,0x0141, 0x0143,0x0143, 0x0145,0x0145, 0x0147,0x0147, 0x014a,0x014a, 
    0x014c,0x014c, 0x014e,0x014e, 0x0150,0x0150, 0x0152,0x0152, 0x0154,0x0154, 0x0156,0x0156, 0x0158,0x0158, 0x015a,0x015a, 
    0x015c,0x015c, 0x015e,0x015e, 0x0160,0x0160, 0x0162,0x0162, 0x0164,0x0164, 0x0166,0x0166, 0x0168,0x0168, 0x016a,0x016a, 
    0x016c,0x016c, 0x016e,0x016e, 0x0170,0x0170, 0x0172,0x0172, 0x0174,0x0174, 0x0176,0x0176, 0x0178,0x0179, 0x017b,0x017b, 
    0x017d,0x017d, 0x0181,0x0182, 0x0184,0x0184, 0x0186,0x0187, 0x0189,0x018b, 0x018e,0x0191, 0x0193,0x0194, 0x0196,0x0198, 
    0x019c,0x019d, 0x019f,0x01a0, 0x01a2,0x01a2, 0x01a4,0x01a4, 0x01a6,0x01a7, 0x01a9,0x01a9, 0x01ac,0x01ac, 0x01ae,0x01af, 
    0x01b1,0x01b3, 0x01b5,0x01b5, 0x01b7,0x01b8, 0x01bc,0x01bc, 0x01c4,0x01c4, 0x01c7,0x01c7, 0x01ca,0x01ca, 0x01cd,0x01cd, 
    0x01cf,0x01cf, 0x01d1,0x01d1, 0x01d3,0x01d3, 0x01d5,0x01d5, 0x01d7,0x01d7, 0x01d9,0x01d9, 0x01db,0x01db, 0x01de,0x01de, 
    0x01e0,0x01e0, 0x01e2,0x01e2, 0x01e4,0x01e4, 0x01e6,0x01e6, 0x01e8,0x01e8, 0x01ea,0x01ea, 0x01ec,0x01ec, 0x01ee,0x01ee, 
    0x01f1,0x01f1, 0x01f4,0x01f4, 0x01f6,0x01f8, 0x01fa,0x01fa, 0x01fc,0x01fc, 0x01fe,0x01fe, 0x0200,0x0200, 0x0202,0x0202, 
    0x0204,0x0204, 0x0206,0x0206, 0x0208,0x0208, 0x020a,0x020a, 0x020c,0x020c, 0x020e,0x020e, 0x0210,0x0210, 0x0212,0x0212, 
    0x0214,0x0214, 0x0216,0x0216, 0x0218,0x0218, 0x021a,0x021a, 0x021c,0x021c, 0x021e,0x021e, 0x0220,0x0220, 0x0222,0x0222, 
    0x0224,0x0224, 0x0226,0x0226, 0x0228,0x0228, 0x022a,0x022a, 0x022c,0x022c, 0x022e,0x022e, 0x0230,0x0230, 0x0232,0x0232, 
    0x023a,0x023b, 0x023d,0x023e, 0x0241,0x0241, 0x0243,0x0246, 0x0248,0x0248, 0x024a,0x024a, 0x024c,0x024c, 0x024e,0x024e, 
    0x0370,0x0370, 0x0372,0x0372, 0x0376,0x0376, 0x037f,0x037f, 0x0386,0x0386, 0x0388,0x038a, 0x038c,0x038c, 0x038e,0x038f, 
    0x0391,0x03a1, 0x03a3,0x03ab, 0x03cf,0x03cf, 0x03d2,0x03d4, 0x03d8,0x03d8, 0x03da,0x03da, 0x03dc,0x03dc, 0x03de,0x03de, 
    0x03e0,0x03e0, 0x03e2,0x03e2, 0x03e4,0x03e4, 0x03e6,0x03e6, 0x03e8,0x03e8, 0x03ea,0x03ea, 0x03ec,0x03ec, 0x03ee,0x03ee, 
    0x03f4,0x03f4, 0x03f7,0x03f7, 0x03f9,0x03fa, 0x03fd,0x042f, 0x0460,0x0460, 0x0462,0x0462, 0x0464,0x0464, 0x0466,0x0466, 
    0x0468,0x0468, 0x046a,0x046a, 0x046c,0x046c, 0x046e,0x046e, 0x0470,0x0470, 0x0472,0x0472, 0x0474,0x0474, 0x0476,0x0476, 
    0x0478,0x0478, 0x047a,0x047a, 0x047c,0x047c, 0x047e,0x047e, 0x0480,0x0480, 0x048a,0x048a, 0x048c,0x048c, 0x048e,0x048e, 
    0x0490,0x0490, 0x0492,0x0492, 0x0494,0x0494, 0x0496,0x0496, 0x0498,0x0498, 0x049a,0x049a, 0x049c,0x049c, 0x049e,0x049e, 
    0x04a0,0x04a0, 0x04a2,0x04a2, 0x04a4,0x04a4, 0x04a6,0x04a6, 0x04a8,0x04a8, 0x04aa,0x04aa, 0x04ac,0x04ac, 0x04ae,0x04ae, 
    0x04b0,0x04b0, 0x04b2,0x04b2, 0x04b4,0x04b4, 0x04b6,0x04b6, 0x04b8,0x04b8, 0x04ba,0x04ba, 0x04bc,0x04bc, 0x04be,0x04be, 
    0x04c0,0x04c1, 0x04c3,0x04c3, 0x04c5,0x04c5, 0x04c7,0x04c7, 0x04c9,0x04c9, 0x04cb,0x04cb, 0x04cd,0x04cd, 0x04d0,0x04d0, 
    0x04d2,0x04d2, 0x04d4,0x04d4, 0x04d6,0x04d6, 0x04d8,0x04d8, 0x04da,0x04da, 0x04dc,0x04dc, 0x04de,0x04de, 0x04e0,0x04e0, 
    0x04e2,0x04e2, 0x04e4,0x04e4, 0x04e6,0x04e6, 0x04e8,0x04e8, 0x04ea,0x04ea, 0x04ec,0x04ec, 0x04ee,0x04ee, 0x04f0,0x04f0, 
    0x04f2,0x04f2, 0x04f4,0x04f4, 0x04f6,0x04f6, 0x04f8,0x04f8, 0x04fa,0x04fa, 0x04fc,0x04fc, 0x04fe,0x04fe, 0x0500,0x0500, 
    0x0502,0x0502, 0x0504,0x0504, 0x0506,0x0506, 0x0508,0x0508, 0x050a,0x050a, 0x050c,0x050c, 0x050e,0x050e, 0x0510,0x0510, 
    0x0512,0x0512, 0x0514,0x0514, 0x0516,0x0516, 0x0518,0x0518, 0x051a,0x051a, 0x051c,0x051c, 0x051e,0x051e, 0x0520,0x0520, 
    0x0522,0x0522, 0x0524,0x0524, 0x0526,0x0526, 0x0528,0x0528, 0x052a,0x052a, 0x052c,0x052c, 0x052e,0x052e, 0x0531,0x0556, 
    0x10a0,0x10c5, 0x10c7,0x10c7, 0x10cd,0x10cd, 0x13a0,0x13f5, 0x1c89,0x1c89, 0x1c90,0x1cba, 0x1cbd,0x1cbf, 0x1e00,0x1e00, 
    0x1e02,0x1e02, 0x1e04,0x1e04, 0x1e06,0x1e06, 0x1e08,0x1e08, 0x1e0a,0x1e0a, 0x1e0c,0x1e0c, 0x1e0e,0x1e0e, 0x1e10,0x1e10, 
    0x1e12,0x1e12, 0x1e14,0x1e14, 0x1e16,0x1e16, 0x1e18,0x1e18, 0x1e1a,0x1e1a, 0x1e1c,0x1e1c, 0x1e1e,0x1e1e, 0x1e20,0x1e20, 
    0x1e22,0x1e22, 0x1e24,0x1e24, 0x1e26,0x1e26, 0x1e28,0x1e28, 0x1e2a,0x1e2a, 0x1e2c,0x1e2c, 0x1e2e,0x1e2e, 0x1e30,0x1e30, 
    0x1e32,0x1e32, 0x1e34,0x1e34, 0x1e36,0x1e36, 0x1e38,0x1e38, 0x1e3a,0x1e3a, 0x1e3c,0x1e3c, 0x1e3e,0x1e3e, 0x1e40,0x1e40, 
    0x1e42,0x1e42, 0x1e44,0x1e44, 0x1e46,0x1e46, 0x1e48,0x1e48, 0x1e4a,0x1e4a, 0x1e4c,0x1e4c, 0x1e4e,0x1e4e, 0x1e50,0x1e50, 
    0x1e52,0x1e52, 0x1e54,0x1e54, 0x1e56,0x1e56, 0x1e58,0x1e58, 0x1e5a,0x1e5a, 0x1e5c,0x1e5c, 0x1e5e,0x1e5e, 0x1e60,0x1e60, 
    0x1e62,0x1e62, 0x1e64,0x1e64, 0x1e66,0x1e66, 0x1e68,0x1e68, 0x1e6a,0x1e6a, 0x1e6c,0x1e6c, 0x1e6e,0x1e6e, 0x1e70,0x1e70, 
    0x1e72,0x1e72, 0x1e74,0x1e74, 0x1e76,0x1e76, 0x1e78,0x1e78, 0x1e7a,0x1e7a, 0x1e7c,0x1e7c, 0x1e7e,0x1e7e, 0x1e80,0x1e80, 
    0x1e82,0x1e82, 0x1e84,0x1e84, 0x1e86,0x1e86, 0x1e88,0x1e88, 0x1e8a,0x1e8a, 0x1e8c,0x1e8c, 0x1e8e,0x1e8e, 0x1e90,0x1e90, 
    0x1e92,0x1e92, 0x1e94,0x1e94, 0x1e9e,0x1e9e, 0x1ea0,0x1ea0, 0x1ea2,0x1ea2, 0x1ea4,0x1ea4, 0x1ea6,0x1ea6, 0x1ea8,0x1ea8, 
    0x1eaa,0x1eaa, 0x1eac,0x1eac, 0x1eae,0x1eae, 0x1eb0,0x1eb0, 0x1eb2,0x1eb2, 0x1eb4,0x1eb4, 0x1eb6,0x1eb6, 0x1eb8,0x1eb8, 
    0x1eba,0x1eba, 0x1ebc,0x1ebc, 0x1ebe,0x1ebe, 0x1ec0,0x1ec0, 0x1ec2,0x1ec2, 0x1ec4,0x1ec4, 0x1ec6,0x1ec6, 0x1ec8,0x1ec8, 
    0x1eca,0x1eca, 0x1ecc,0x1ecc, 0x1ece,0x1ece, 0x1ed0,0x1ed0, 0x1ed2,0x1ed2, 0x1ed4,0x1ed4, 0x1ed6,0x1ed6, 0x1ed8,0x1ed8, 
    0x1eda,0x1eda, 0x1edc,0x1edc, 0x1ede,0x1ede, 0x1ee0,0x1ee0, 0x1ee2,0x1ee2, 0x1ee4,0x1ee4, 0x1ee6,0x1ee6, 0x1ee8,0x1ee8, 
    0x1eea,0x1eea, 0x1eec,0x1eec, 0x1eee,0x1eee, 0x1ef0,0x1ef0, 0x1ef2,0x1ef2, 0x1ef4,0x1ef4, 0x1ef6,0x1ef6, 0x1ef8,0x1ef8, 
    0x1efa,0x1efa, 0x1efc,0x1efc, 0x1efe,0x1efe, 0x1f08,0x1f0f, 0x1f18,0x1f1d, 0x1f28,0x1f2f, 0x1f38,0x1f3f, 0x1f48,0x1f4d, 
    0x1f59,0x1f59, 0x1f5b,0x1f5b, 0x1f5d,0x1f5d, 0x1f5f,0x1f5f, 0x1f68,0x1f6f, 0x1fb8,0x1fbb, 0x1fc8,0x1fcb, 0x1fd8,0x1fdb, 
    0x1fe8,0x1fec, 0x1ff8,0x1ffb, 0x2102,0x2102, 0x2107,0x2107, 0x210b,0x210d, 0x2110,0x2112, 0x2115,0x2115, 0x2119,0x211d, 
    0x2124,0x2124, 0x2126,0x2126, 0x2128,0x2128, 0x212a,0x212d, 0x2130,0x2133, 0x213e,0x213f, 0x2145,0x2145, 0x2183,0x2183, 
    0x2c00,0x2c2f, 0x2c60,0x2c60, 0x2c62,0x2c64, 0x2c67,0x2c67, 0x2c69,0x2c69, 0x2c6b,0x2c6b, 0x2c6d,0x2c70, 0x2c72,0x2c72, 
    0x2c75,0x2c75, 0x2c7e,0x2c80, 0x2c82,0x2c82, 0x2c84,0x2c84, 0x2c86,0x2c86, 0x2c88,0x2c88, 0x2c8a,0x2c8a, 0x2c8c,0x2c8c, 
    0x2c8e,0x2c8e, 0x2c90,0x2c90, 0x2c92,0x2c92, 0x2c94,0x2c94, 0x2c96,0x2c96, 0x2c98,0x2c98, 0x2c9a,0x2c9a, 0x2c9c,0x2c9c, 
    0x2c9e,0x2c9e, 0x2ca0,0x2ca0, 0x2ca2,0x2ca2, 0x2ca4,0x2ca4, 0x2ca6,0x2ca6, 0x2ca8,0x2ca8, 0x2caa,0x2caa, 0x2cac,0x2cac, 
    0x2cae,0x2cae, 0x2cb0,0x2cb0, 0x2cb2,0x2cb2, 0x2cb4,0x2cb4, 0x2cb6,0x2cb6, 0x2cb8,0x2cb8, 0x2cba,0x2cba, 0x2cbc,0x2cbc, 
    0x2cbe,0x2cbe, 0x2cc0,0x2cc0, 0x2cc2,0x2cc2, 0x2cc4,0x2cc4, 0x2cc6,0x2cc6, 0x2cc8,0x2cc8, 0x2cca,0x2cca, 0x2ccc,0x2ccc, 
    0x2cce,0x2cce, 0x2cd0,0x2cd0, 0x2cd2,0x2cd2, 0x2cd4,0x2cd4, 0x2cd6,0x2cd6, 0x2cd8,0x2cd8, 0x2cda,0x2cda, 0x2cdc,0x2cdc, 
    0x2cde,0x2cde, 0x2ce0,0x2ce0, 0x2ce2,0x2ce2, 0x2ceb,0x2ceb, 0x2ced,0x2ced, 0x2cf2,0x2cf2, 0xa640,0xa640, 0xa642,0xa642, 
    0xa644,0xa644, 0xa646,0xa646, 0xa648,0xa648, 0xa64a,0xa64a, 0xa64c,0xa64c, 0xa64e,0xa64e, 0xa650,0xa650, 0xa652,0xa652, 
    0xa654,0xa654, 0xa656,0xa656, 0xa658,0xa658, 0xa65a,0xa65a, 0xa65c,0xa65c, 0xa65e,0xa65e, 0xa660,0xa660, 0xa662,0xa662, 
    0xa664,0xa664, 0xa666,0xa666, 0xa668,0xa668, 0xa66a,0xa66a, 0xa66c,0xa66c, 0xa680,0xa680, 0xa682,0xa682, 0xa684,0xa684, 
    0xa686,0xa686, 0xa688,0xa688, 0xa68a,0xa68a, 0xa68c,0xa68c, 0xa68e,0xa68e, 0xa690,0xa690, 0xa692,0xa692, 0xa694,0xa694, 
    0xa696,0xa696, 0xa698,0xa698, 0xa69a,0xa69a, 0xa722,0xa722, 0xa724,0xa724, 0xa726,0xa726, 0xa728,0xa728, 0xa72a,0xa72a, 
    0xa72c,0xa72c, 0xa72e,0xa72e, 0xa732,0xa732, 0xa734,0xa734, 0xa736,0xa736, 0xa738,0xa738, 0xa73a,0xa73a, 0xa73c,0xa73c, 
    0xa73e,0xa73e, 0xa740,0xa740, 0xa742,0xa742, 0xa744,0xa744, 0xa746,0xa746, 0xa748,0xa748, 0xa74a,0xa74a, 0xa74c,0xa74c, 
    0xa74e,0xa74e, 0xa750,0xa750, 0xa752,0xa752, 0xa754,0xa754, 0xa756,0xa756, 0xa758,0xa758, 0xa75a,0xa75a, 0xa75c,0xa75c, 
    0xa75e,0xa75e, 0xa760,0xa760, 0xa762,0xa762, 0xa764,0xa764, 0xa766,0xa766, 0xa768,0xa768, 0xa76a,0xa76a, 0xa76c,0xa76c, 
    0xa76e,0xa76e, 0xa779,0xa779, 0xa77b,0xa77b, 0xa77d,0xa77e, 0xa780,0xa780, 0xa782,0xa782, 0xa784,0xa784, 0xa786,0xa786, 
    0xa78b,0xa78b, 0xa78d,0xa78d, 0xa790,0xa790, 0xa792,0xa792, 0xa796,0xa796, 0xa798,0xa798, 0xa79a,0xa79a, 0xa79c,0xa79c, 
    0xa79e,0xa79e, 0xa7a0,0xa7a0, 0xa7a2,0xa7a2, 0xa7a4,0xa7a4, 0xa7a6,0xa7a6, 0xa7a8,0xa7a8, 0xa7aa,0xa7ae, 0xa7b0,0xa7b4, 
    0xa7b6,0xa7b6, 0xa7b8,0xa7b8, 0xa7ba,0xa7ba, 0xa7bc,0xa7bc, 0xa7be,0xa7be, 0xa7c0,0xa7c0, 0xa7c2,0xa7c2, 0xa7c4,0xa7c7, 
    0xa7c9,0xa7c9, 0xa7cb,0xa7cc, 0xa7d0,0xa7d0, 0xa7d6,0xa7d6, 0xa7d8,0xa7d8, 0xa7da,0xa7da, 0xa7dc,0xa7dc, 0xa7f5,0xa7f5, 
    0xff21,0xff3a, 0x10400,0x10427, 0x104b0,0x104d3, 0x10570,0x1057a, 0x1057c,0x1058a, 0x1058c,0x10592, 0x10594,0x10595, 0x10c80,0x10cb2, 
    0x10d50,0x10d65, 0x118a0,0x118bf, 0x16e40,0x16e5f, 0x1d400,0x1d419, 0x1d434,0x1d44d, 0x1d468,0x1d481, 0x1d49c,0x1d49c, 0x1d49e,0x1d49f, 
    0x1d4a2,0x1d4a2, 0x1d4a5,0x1d4a6, 0x1d4a9,0x1d4ac, 0x1d4ae,0x1d4b5, 0x1d4d0,0x1d4e9, 0x1d504,0x1d505, 0x1d507,0x1d50a, 0x1d50d,0x1d514, 
    0x1d516,0x1d51c, 0x1d538,0x1d539, 0x1d53b,0x1d53e, 0x1d540,0x1d544, 0x1d546,0x1d546, 0x1d54a,0x1d550, 0x1d56c,0x1d585, 0x1d5a0,0x1d5b9, 
    0x1d5d4,0x1d5ed, 0x1d608,0x1d621, 0x1d63c,0x1d655, 0x1d670,0x1d689, 0x1d6a8,0x1d6c0, 0x1d6e2,0x1d6fa, 0x1d71c,0x1d734, 0x1d756,0x1d76e, 
    0x1d790,0x1d7a8, 0x1d7ca,0x1d7ca, 0x1e900,0x1e921, 
};//UNICODE_RANGE_UPPERCASE - Lu

Unicode_Range UNICODE_RANGE_LOWERCASE[662] = { //Ll
    0x0061,0x007a, 0x00b5,0x00b5, 0x00df,0x00f6, 0x00f8,0x00ff, 0x0101,0x0101, 0x0103,0x0103, 0x0105,0x0105, 0x0107,0x0107, 
    0x0109,0x0109, 0x010b,0x010b, 0x010d,0x010d, 0x010f,0x010f, 0x0111,0x0111, 0x0113,0x0113, 0x0115,0x0115, 0x0117,0x0117, 
    0x0119,0x0119, 0x011b,0x011b, 0x011d,0x011d, 0x011f,0x011f, 0x0121,0x0121, 0x0123,0x0123, 0x0125,0x0125, 0x0127,0x0127, 
    0x0129,0x0129, 0x012b,0x012b, 0x012d,0x012d, 0x012f,0x012f, 0x0131,0x0131, 0x0133,0x0133, 0x0135,0x0135, 0x0137,0x0138, 
    0x013a,0x013a, 0x013c,0x013c, 0x013e,0x013e, 0x0140,0x0140, 0x0142,0x0142, 0x0144,0x0144, 0x0146,0x0146, 0x0148,0x0149, 
    0x014b,0x014b, 0x014d,0x014d, 0x014f,0x014f, 0x0151,0x0151, 0x0153,0x0153, 0x0155,0x0155, 0x0157,0x0157, 0x0159,0x0159, 
    0x015b,0x015b, 0x015d,0x015d, 0x015f,0x015f, 0x0161,0x0161, 0x0163,0x0163, 0x0165,0x0165, 0x0167,0x0167, 0x0169,0x0169, 
    0x016b,0x016b, 0x016d,0x016d, 0x016f,0x016f, 0x0171,0x0171, 0x0173,0x0173, 0x0175,0x0175, 0x0177,0x0177, 0x017a,0x017a, 
    0x017c,0x017c, 0x017e,0x0180, 0x0183,0x0183, 0x0185,0x0185, 0x0188,0x0188, 0x018c,0x018d, 0x0192,0x0192, 0x0195,0x0195, 
    0x0199,0x019b, 0x019e,0x019e, 0x01a1,0x01a1, 0x01a3,0x01a3, 0x01a5,0x01a5, 0x01a8,0x01a8, 0x01aa,0x01ab, 0x01ad,0x01ad, 
    0x01b0,0x01b0, 0x01b4,0x01b4, 0x01b6,0x01b6, 0x01b9,0x01ba, 0x01bd,0x01bf, 0x01c6,0x01c6, 0x01c9,0x01c9, 0x01cc,0x01cc, 
    0x01ce,0x01ce, 0x01d0,0x01d0, 0x01d2,0x01d2, 0x01d4,0x01d4, 0x01d6,0x01d6, 0x01d8,0x01d8, 0x01da,0x01da, 0x01dc,0x01dd, 
    0x01df,0x01df, 0x01e1,0x01e1, 0x01e3,0x01e3, 0x01e5,0x01e5, 0x01e7,0x01e7, 0x01e9,0x01e9, 0x01eb,0x01eb, 0x01ed,0x01ed, 
    0x01ef,0x01f0, 0x01f3,0x01f3, 0x01f5,0x01f5, 0x01f9,0x01f9, 0x01fb,0x01fb, 0x01fd,0x01fd, 0x01ff,0x01ff, 0x0201,0x0201, 
    0x0203,0x0203, 0x0205,0x0205, 0x0207,0x0207, 0x0209,0x0209, 0x020b,0x020b, 0x020d,0x020d, 0x020f,0x020f, 0x0211,0x0211, 
    0x0213,0x0213, 0x0215,0x0215, 0x0217,0x0217, 0x0219,0x0219, 0x021b,0x021b, 0x021d,0x021d, 0x021f,0x021f, 0x0221,0x0221, 
    0x0223,0x0223, 0x0225,0x0225, 0x0227,0x0227, 0x0229,0x0229, 0x022b,0x022b, 0x022d,0x022d, 0x022f,0x022f, 0x0231,0x0231, 
    0x0233,0x0239, 0x023c,0x023c, 0x023f,0x0240, 0x0242,0x0242, 0x0247,0x0247, 0x0249,0x0249, 0x024b,0x024b, 0x024d,0x024d, 
    0x024f,0x0293, 0x0295,0x02af, 0x0371,0x0371, 0x0373,0x0373, 0x0377,0x0377, 0x037b,0x037d, 0x0390,0x0390, 0x03ac,0x03ce, 
    0x03d0,0x03d1, 0x03d5,0x03d7, 0x03d9,0x03d9, 0x03db,0x03db, 0x03dd,0x03dd, 0x03df,0x03df, 0x03e1,0x03e1, 0x03e3,0x03e3, 
    0x03e5,0x03e5, 0x03e7,0x03e7, 0x03e9,0x03e9, 0x03eb,0x03eb, 0x03ed,0x03ed, 0x03ef,0x03f3, 0x03f5,0x03f5, 0x03f8,0x03f8, 
    0x03fb,0x03fc, 0x0430,0x045f, 0x0461,0x0461, 0x0463,0x0463, 0x0465,0x0465, 0x0467,0x0467, 0x0469,0x0469, 0x046b,0x046b, 
    0x046d,0x046d, 0x046f,0x046f, 0x0471,0x0471, 0x0473,0x0473, 0x0475,0x0475, 0x0477,0x0477, 0x0479,0x0479, 0x047b,0x047b, 
    0x047d,0x047d, 0x047f,0x047f, 0x0481,0x0481, 0x048b,0x048b, 0x048d,0x048d, 0x048f,0x048f, 0x0491,0x0491, 0x0493,0x0493, 
    0x0495,0x0495, 0x0497,0x0497, 0x0499,0x0499, 0x049b,0x049b, 0x049d,0x049d, 0x049f,0x049f, 0x04a1,0x04a1, 0x04a3,0x04a3, 
    0x04a5,0x04a5, 0x04a7,0x04a7, 0x04a9,0x04a9, 0x04ab,0x04ab, 0x04ad,0x04ad, 0x04af,0x04af, 0x04b1,0x04b1, 0x04b3,0x04b3, 
    0x04b5,0x04b5, 0x04b7,0x04b7, 0x04b9,0x04b9, 0x04bb,0x04bb, 0x04bd,0x04bd, 0x04bf,0x04bf, 0x04c2,0x04c2, 0x04c4,0x04c4, 
    0x04c6,0x04c6, 0x04c8,0x04c8, 0x04ca,0x04ca, 0x04cc,0x04cc, 0x04ce,0x04cf, 0x04d1,0x04d1, 0x04d3,0x04d3, 0x04d5,0x04d5, 
    0x04d7,0x04d7, 0x04d9,0x04d9, 0x04db,0x04db, 0x04dd,0x04dd, 0x04df,0x04df, 0x04e1,0x04e1, 0x04e3,0x04e3, 0x04e5,0x04e5, 
    0x04e7,0x04e7, 0x04e9,0x04e9, 0x04eb,0x04eb, 0x04ed,0x04ed, 0x04ef,0x04ef, 0x04f1,0x04f1, 0x04f3,0x04f3, 0x04f5,0x04f5, 
    0x04f7,0x04f7, 0x04f9,0x04f9, 0x04fb,0x04fb, 0x04fd,0x04fd, 0x04ff,0x04ff, 0x0501,0x0501, 0x0503,0x0503, 0x0505,0x0505, 
    0x0507,0x0507, 0x0509,0x0509, 0x050b,0x050b, 0x050d,0x050d, 0x050f,0x050f, 0x0511,0x0511, 0x0513,0x0513, 0x0515,0x0515, 
    0x0517,0x0517, 0x0519,0x0519, 0x051b,0x051b, 0x051d,0x051d, 0x051f,0x051f, 0x0521,0x0521, 0x0523,0x0523, 0x0525,0x0525, 
    0x0527,0x0527, 0x0529,0x0529, 0x052b,0x052b, 0x052d,0x052d, 0x052f,0x052f, 0x0560,0x0588, 0x10d0,0x10fa, 0x10fd,0x10ff, 
    0x13f8,0x13fd, 0x1c80,0x1c88, 0x1c8a,0x1c8a, 0x1d00,0x1d2b, 0x1d6b,0x1d77, 0x1d79,0x1d9a, 0x1e01,0x1e01, 0x1e03,0x1e03, 
    0x1e05,0x1e05, 0x1e07,0x1e07, 0x1e09,0x1e09, 0x1e0b,0x1e0b, 0x1e0d,0x1e0d, 0x1e0f,0x1e0f, 0x1e11,0x1e11, 0x1e13,0x1e13, 
    0x1e15,0x1e15, 0x1e17,0x1e17, 0x1e19,0x1e19, 0x1e1b,0x1e1b, 0x1e1d,0x1e1d, 0x1e1f,0x1e1f, 0x1e21,0x1e21, 0x1e23,0x1e23, 
    0x1e25,0x1e25, 0x1e27,0x1e27, 0x1e29,0x1e29, 0x1e2b,0x1e2b, 0x1e2d,0x1e2d, 0x1e2f,0x1e2f, 0x1e31,0x1e31, 0x1e33,0x1e33, 
    0x1e35,0x1e35, 0x1e37,0x1e37, 0x1e39,0x1e39, 0x1e3b,0x1e3b, 0x1e3d,0x1e3d, 0x1e3f,0x1e3f, 0x1e41,0x1e41, 0x1e43,0x1e43, 
    0x1e45,0x1e45, 0x1e47,0x1e47, 0x1e49,0x1e49, 0x1e4b,0x1e4b, 0x1e4d,0x1e4d, 0x1e4f,0x1e4f, 0x1e51,0x1e51, 0x1e53,0x1e53, 
    0x1e55,0x1e55, 0x1e57,0x1e57, 0x1e59,0x1e59, 0x1e5b,0x1e5b, 0x1e5d,0x1e5d, 0x1e5f,0x1e5f, 0x1e61,0x1e61, 0x1e63,0x1e63, 
    0x1e65,0x1e65, 0x1e67,0x1e67, 0x1e69,0x1e69, 0x1e6b,0x1e6b, 0x1e6d,0x1e6d, 0x1e6f,0x1e6f, 0x1e71,0x1e71, 0x1e73,0x1e73, 
    0x1e75,0x1e75, 0x1e77,0x1e77, 0x1e79,0x1e79, 0x1e7b,0x1e7b, 0x1e7d,0x1e7d, 0x1e7f,0x1e7f, 0x1e81,0x1e81, 0x1e83,0x1e83, 
    0x1e85,0x1e85, 0x1e87,0x1e87, 0x1e89,0x1e89, 0x1e8b,0x1e8b, 0x1e8d,0x1e8d, 0x1e8f,0x1e8f, 0x1e91,0x1e91, 0x1e93,0x1e93, 
    0x1e95,0x1e9d, 0x1e9f,0x1e9f, 0x1ea1,0x1ea1, 0x1ea3,0x1ea3, 0x1ea5,0x1ea5, 0x1ea7,0x1ea7, 0x1ea9,0x1ea9, 0x1eab,0x1eab, 
    0x1ead,0x1ead, 0x1eaf,0x1eaf, 0x1eb1,0x1eb1, 0x1eb3,0x1eb3, 0x1eb5,0x1eb5, 0x1eb7,0x1eb7, 0x1eb9,0x1eb9, 0x1ebb,0x1ebb, 
    0x1ebd,0x1ebd, 0x1ebf,0x1ebf, 0x1ec1,0x1ec1, 0x1ec3,0x1ec3, 0x1ec5,0x1ec5, 0x1ec7,0x1ec7, 0x1ec9,0x1ec9, 0x1ecb,0x1ecb, 
    0x1ecd,0x1ecd, 0x1ecf,0x1ecf, 0x1ed1,0x1ed1, 0x1ed3,0x1ed3, 0x1ed5,0x1ed5, 0x1ed7,0x1ed7, 0x1ed9,0x1ed9, 0x1edb,0x1edb, 
    0x1edd,0x1edd, 0x1edf,0x1edf, 0x1ee1,0x1ee1, 0x1ee3,0x1ee3, 0x1ee5,0x1ee5, 0x1ee7,0x1ee7, 0x1ee9,0x1ee9, 0x1eeb,0x1eeb, 
    0x1eed,0x1eed, 0x1eef,0x1eef, 0x1ef1,0x1ef1, 0x1ef3,0x1ef3, 0x1ef5,0x1ef5, 0x1ef7,0x1ef7, 0x1ef9,0x1ef9, 0x1efb,0x1efb, 
    0x1efd,0x1efd, 0x1eff,0x1f07, 0x1f10,0x1f15, 0x1f20,0x1f27, 0x1f30,0x1f37, 0x1f40,0x1f45, 0x1f50,0x1f57, 0x1f60,0x1f67, 
    0x1f70,0x1f7d, 0x1f80,0x1f87, 0x1f90,0x1f97, 0x1fa0,0x1fa7, 0x1fb0,0x1fb4, 0x1fb6,0x1fb7, 0x1fbe,0x1fbe, 0x1fc2,0x1fc4, 
    0x1fc6,0x1fc7, 0x1fd0,0x1fd3, 0x1fd6,0x1fd7, 0x1fe0,0x1fe7, 0x1ff2,0x1ff4, 0x1ff6,0x1ff7, 0x210a,0x210a, 0x210e,0x210f, 
    0x2113,0x2113, 0x212f,0x212f, 0x2134,0x2134, 0x2139,0x2139, 0x213c,0x213d, 0x2146,0x2149, 0x214e,0x214e, 0x2184,0x2184, 
    0x2c30,0x2c5f, 0x2c61,0x2c61, 0x2c65,0x2c66, 0x2c68,0x2c68, 0x2c6a,0x2c6a, 0x2c6c,0x2c6c, 0x2c71,0x2c71, 0x2c73,0x2c74, 
    0x2c76,0x2c7b, 0x2c81,0x2c81, 0x2c83,0x2c83, 0x2c85,0x2c85, 0x2c87,0x2c87, 0x2c89,0x2c89, 0x2c8b,0x2c8b, 0x2c8d,0x2c8d, 
    0x2c8f,0x2c8f, 0x2c91,0x2c91, 0x2c93,0x2c93, 0x2c95,0x2c95, 0x2c97,0x2c97, 0x2c99,0x2c99, 0x2c9b,0x2c9b, 0x2c9d,0x2c9d, 
    0x2c9f,0x2c9f, 0x2ca1,0x2ca1, 0x2ca3,0x2ca3, 0x2ca5,0x2ca5, 0x2ca7,0x2ca7, 0x2ca9,0x2ca9, 0x2cab,0x2cab, 0x2cad,0x2cad, 
    0x2caf,0x2caf, 0x2cb1,0x2cb1, 0x2cb3,0x2cb3, 0x2cb5,0x2cb5, 0x2cb7,0x2cb7, 0x2cb9,0x2cb9, 0x2cbb,0x2cbb, 0x2cbd,0x2cbd, 
    0x2cbf,0x2cbf, 0x2cc1,0x2cc1, 0x2cc3,0x2cc3, 0x2cc5,0x2cc5, 0x2cc7,0x2cc7, 0x2cc9,0x2cc9, 0x2ccb,0x2ccb, 0x2ccd,0x2ccd, 
    0x2ccf,0x2ccf, 0x2cd1,0x2cd1, 0x2cd3,0x2cd3, 0x2cd5,0x2cd5, 0x2cd7,0x2cd7, 0x2cd9,0x2cd9, 0x2cdb,0x2cdb, 0x2cdd,0x2cdd, 
    0x2cdf,0x2cdf, 0x2ce1,0x2ce1, 0x2ce3,0x2ce4, 0x2cec,0x2cec, 0x2cee,0x2cee, 0x2cf3,0x2cf3, 0x2d00,0x2d25, 0x2d27,0x2d27, 
    0x2d2d,0x2d2d, 0xa641,0xa641, 0xa643,0xa643, 0xa645,0xa645, 0xa647,0xa647, 0xa649,0xa649, 0xa64b,0xa64b, 0xa64d,0xa64d, 
    0xa64f,0xa64f, 0xa651,0xa651, 0xa653,0xa653, 0xa655,0xa655, 0xa657,0xa657, 0xa659,0xa659, 0xa65b,0xa65b, 0xa65d,0xa65d, 
    0xa65f,0xa65f, 0xa661,0xa661, 0xa663,0xa663, 0xa665,0xa665, 0xa667,0xa667, 0xa669,0xa669, 0xa66b,0xa66b, 0xa66d,0xa66d, 
    0xa681,0xa681, 0xa683,0xa683, 0xa685,0xa685, 0xa687,0xa687, 0xa689,0xa689, 0xa68b,0xa68b, 0xa68d,0xa68d, 0xa68f,0xa68f, 
    0xa691,0xa691, 0xa693,0xa693, 0xa695,0xa695, 0xa697,0xa697, 0xa699,0xa699, 0xa69b,0xa69b, 0xa723,0xa723, 0xa725,0xa725, 
    0xa727,0xa727, 0xa729,0xa729, 0xa72b,0xa72b, 0xa72d,0xa72d, 0xa72f,0xa731, 0xa733,0xa733, 0xa735,0xa735, 0xa737,0xa737, 
    0xa739,0xa739, 0xa73b,0xa73b, 0xa73d,0xa73d, 0xa73f,0xa73f, 0xa741,0xa741, 0xa743,0xa743, 0xa745,0xa745, 0xa747,0xa747, 
    0xa749,0xa749, 0xa74b,0xa74b, 0xa74d,0xa74d, 0xa74f,0xa74f, 0xa751,0xa751, 0xa753,0xa753, 0xa755,0xa755, 0xa757,0xa757, 
    0xa759,0xa759, 0xa75b,0xa75b, 0xa75d,0xa75d, 0xa75f,0xa75f, 0xa761,0xa761, 0xa763,0xa763, 0xa765,0xa765, 0xa767,0xa767, 
    0xa769,0xa769, 0xa76b,0xa76b, 0xa76d,0xa76d, 0xa76f,0xa76f, 0xa771,0xa778, 0xa77a,0xa77a, 0xa77c,0xa77c, 0xa77f,0xa77f, 
    0xa781,0xa781, 0xa783,0xa783, 0xa785,0xa785, 0xa787,0xa787, 0xa78c,0xa78c, 0xa78e,0xa78e, 0xa791,0xa791, 0xa793,0xa795, 
    0xa797,0xa797, 0xa799,0xa799, 0xa79b,0xa79b, 0xa79d,0xa79d, 0xa79f,0xa79f, 0xa7a1,0xa7a1, 0xa7a3,0xa7a3, 0xa7a5,0xa7a5, 
    0xa7a7,0xa7a7, 0xa7a9,0xa7a9, 0xa7af,0xa7af, 0xa7b5,0xa7b5, 0xa7b7,0xa7b7, 0xa7b9,0xa7b9, 0xa7bb,0xa7bb, 0xa7bd,0xa7bd, 
    0xa7bf,0xa7bf, 0xa7c1,0xa7c1, 0xa7c3,0xa7c3, 0xa7c8,0xa7c8, 0xa7ca,0xa7ca, 0xa7cd,0xa7cd, 0xa7d1,0xa7d1, 0xa7d3,0xa7d3, 
    0xa7d5,0xa7d5, 0xa7d7,0xa7d7, 0xa7d9,0xa7d9, 0xa7db,0xa7db, 0xa7f6,0xa7f6, 0xa7fa,0xa7fa, 0xab30,0xab5a, 0xab60,0xab68, 
    0xab70,0xabbf, 0xfb00,0xfb06, 0xfb13,0xfb17, 0xff41,0xff5a, 0x10428,0x1044f, 0x104d8,0x104fb, 0x10597,0x105a1, 0x105a3,0x105b1, 
    0x105b3,0x105b9, 0x105bb,0x105bc, 0x10cc0,0x10cf2, 0x10d70,0x10d85, 0x118c0,0x118df, 0x16e60,0x16e7f, 0x1d41a,0x1d433, 0x1d44e,0x1d454, 
    0x1d456,0x1d467, 0x1d482,0x1d49b, 0x1d4b6,0x1d4b9, 0x1d4bb,0x1d4bb, 0x1d4bd,0x1d4c3, 0x1d4c5,0x1d4cf, 0x1d4ea,0x1d503, 0x1d51e,0x1d537, 
    0x1d552,0x1d56b, 0x1d586,0x1d59f, 0x1d5ba,0x1d5d3, 0x1d5ee,0x1d607, 0x1d622,0x1d63b, 0x1d656,0x1d66f, 0x1d68a,0x1d6a5, 0x1d6c2,0x1d6da, 
    0x1d6dc,0x1d6e1, 0x1d6fc,0x1d714, 0x1d716,0x1d71b, 0x1d736,0x1d74e, 0x1d750,0x1d755, 0x1d770,0x1d788, 0x1d78a,0x1d78f, 0x1d7aa,0x1d7c2, 
    0x1d7c4,0x1d7c9, 0x1d7cb,0x1d7cb, 0x1df00,0x1df09, 0x1df0b,0x1df1e, 0x1df25,0x1df2a, 0x1e922,0x1e943, 
};//UNICODE_RANGE_LOWERCASE - Ll

Unicode_Range UNICODE_RANGE_TITLECASE[10] = { //Lt
    0x01c5,0x01c5, 0x01c8,0x01c8, 0x01cb,0x01cb, 0x01f2,0x01f2, 0x1f88,0x1f8f, 0x1f98,0x1f9f, 0x1fa8,0x1faf, 0x1fbc,0x1fbc, 
    0x1fcc,0x1fcc, 0x1ffc,0x1ffc, 
};//UNICODE_RANGE_TITLECASE - Lt

Unicode_Range UNICODE_RANGE_MODIFIER_LETTER[75] = { //Lm
    0x02b0,0x02c1, 0x02c6,0x02d1, 0x02e0,0x02e4, 0x02ec,0x02ec, 0x02ee,0x02ee, 0x0374,0x0374, 0x037a,0x037a, 0x0559,0x0559, 
    0x0640,0x0640, 0x06e5,0x06e6, 0x07f4,0x07f5, 0x07fa,0x07fa, 0x081a,0x081a, 0x0824,0x0824, 0x0828,0x0828, 0x08c9,0x08c9, 
    0x0971,0x0971, 0x0e46,0x0e46, 0x0ec6,0x0ec6, 0x10fc,0x10fc, 0x17d7,0x17d7, 0x1843,0x1843, 0x1aa7,0x1aa7, 0x1c78,0x1c7d, 
    0x1d2c,0x1d6a, 0x1d78,0x1d78, 0x1d9b,0x1dbf, 0x2071,0x2071, 0x207f,0x207f, 0x2090,0x209c, 0x2c7c,0x2c7d, 0x2d6f,0x2d6f, 
    0x2e2f,0x2e2f, 0x3005,0x3005, 0x3031,0x3035, 0x303b,0x303b, 0x309d,0x309e, 0x30fc,0x30fe, 0xa015,0xa015, 0xa4f8,0xa4fd, 
    0xa60c,0xa60c, 0xa67f,0xa67f, 0xa69c,0xa69d, 0xa717,0xa71f, 0xa770,0xa770, 0xa788,0xa788, 0xa7f2,0xa7f4, 0xa7f8,0xa7f9, 
    0xa9cf,0xa9cf, 0xa9e6,0xa9e6, 0xaa70,0xaa70, 0xaadd,0xaadd, 0xaaf3,0xaaf4, 0xab5c,0xab5f, 0xab69,0xab69, 0xff70,0xff70, 
    0xff9e,0xff9f, 0x10780,0x10785, 0x10787,0x107b0, 0x107b2,0x107ba, 0x10d4e,0x10d4e, 0x10d6f,0x10d6f, 0x16b40,0x16b43, 0x16d40,0x16d42, 
    0x16d6b,0x16d6c, 0x16f93,0x16f9f, 0x16fe0,0x16fe1, 0x16fe3,0x16fe3, 0x1aff0,0x1aff3, 0x1aff5,0x1affb, 0x1affd,0x1affe, 0x1e030,0x1e06d, 
    0x1e137,0x1e13d, 0x1e4eb,0x1e4eb, 0x1e94b,0x1e94b, 
};//UNICODE_RANGE_MODIFIER_LETTER - Lm

Unicode_Range UNICODE_RANGE_OTHER_LETTER[528] = { //Lo
    0x00aa,0x00aa, 0x00ba,0x00ba, 0x01bb,0x01bb, 0x01c0,0x01c3, 0x0294,0x0294, 0x05d0,0x05ea, 0x05ef,0x05f2, 0x0620,0x063f, 
    0x0641,0x064a, 0x066e,0x066f, 0x0671,0x06d3, 0x06d5,0x06d5, 0x06ee,0x06ef, 0x06fa,0x06fc, 0x06ff,0x06ff, 0x0710,0x0710, 
    0x0712,0x072f, 0x074d,0x07a5, 0x07b1,0x07b1, 0x07ca,0x07ea, 0x0800,0x0815, 0x0840,0x0858, 0x0860,0x086a, 0x0870,0x0887, 
    0x0889,0x088e, 0x08a0,0x08c8, 0x0904,0x0939, 0x093d,0x093d, 0x0950,0x0950, 0x0958,0x0961, 0x0972,0x0980, 0x0985,0x098c, 
    0x098f,0x0990, 0x0993,0x09a8, 0x09aa,0x09b0, 0x09b2,0x09b2, 0x09b6,0x09b9, 0x09bd,0x09bd, 0x09ce,0x09ce, 0x09dc,0x09dd, 
    0x09df,0x09e1, 0x09f0,0x09f1, 0x09fc,0x09fc, 0x0a05,0x0a0a, 0x0a0f,0x0a10, 0x0a13,0x0a28, 0x0a2a,0x0a30, 0x0a32,0x0a33, 
    0x0a35,0x0a36, 0x0a38,0x0a39, 0x0a59,0x0a5c, 0x0a5e,0x0a5e, 0x0a72,0x0a74, 0x0a85,0x0a8d, 0x0a8f,0x0a91, 0x0a93,0x0aa8, 
    0x0aaa,0x0ab0, 0x0ab2,0x0ab3, 0x0ab5,0x0ab9, 0x0abd,0x0abd, 0x0ad0,0x0ad0, 0x0ae0,0x0ae1, 0x0af9,0x0af9, 0x0b05,0x0b0c, 
    0x0b0f,0x0b10, 0x0b13,0x0b28, 0x0b2a,0x0b30, 0x0b32,0x0b33, 0x0b35,0x0b39, 0x0b3d,0x0b3d, 0x0b5c,0x0b5d, 0x0b5f,0x0b61, 
    0x0b71,0x0b71, 0x0b83,0x0b83, 0x0b85,0x0b8a, 0x0b8e,0x0b90, 0x0b92,0x0b95, 0x0b99,0x0b9a, 0x0b9c,0x0b9c, 0x0b9e,0x0b9f, 
    0x0ba3,0x0ba4, 0x0ba8,0x0baa, 0x0bae,0x0bb9, 0x0bd0,0x0bd0, 0x0c05,0x0c0c, 0x0c0e,0x0c10, 0x0c12,0x0c28, 0x0c2a,0x0c39, 
    0x0c3d,0x0c3d, 0x0c58,0x0c5a, 0x0c5d,0x0c5d, 0x0c60,0x0c61, 0x0c80,0x0c80, 0x0c85,0x0c8c, 0x0c8e,0x0c90, 0x0c92,0x0ca8, 
    0x0caa,0x0cb3, 0x0cb5,0x0cb9, 0x0cbd,0x0cbd, 0x0cdd,0x0cde, 0x0ce0,0x0ce1, 0x0cf1,0x0cf2, 0x0d04,0x0d0c, 0x0d0e,0x0d10, 
    0x0d12,0x0d3a, 0x0d3d,0x0d3d, 0x0d4e,0x0d4e, 0x0d54,0x0d56, 0x0d5f,0x0d61, 0x0d7a,0x0d7f, 0x0d85,0x0d96, 0x0d9a,0x0db1, 
    0x0db3,0x0dbb, 0x0dbd,0x0dbd, 0x0dc0,0x0dc6, 0x0e01,0x0e30, 0x0e32,0x0e33, 0x0e40,0x0e45, 0x0e81,0x0e82, 0x0e84,0x0e84, 
    0x0e86,0x0e8a, 0x0e8c,0x0ea3, 0x0ea5,0x0ea5, 0x0ea7,0x0eb0, 0x0eb2,0x0eb3, 0x0ebd,0x0ebd, 0x0ec0,0x0ec4, 0x0edc,0x0edf, 
    0x0f00,0x0f00, 0x0f40,0x0f47, 0x0f49,0x0f6c, 0x0f88,0x0f8c, 0x1000,0x102a, 0x103f,0x103f, 0x1050,0x1055, 0x105a,0x105d, 
    0x1061,0x1061, 0x1065,0x1066, 0x106e,0x1070, 0x1075,0x1081, 0x108e,0x108e, 0x1100,0x1248, 0x124a,0x124d, 0x1250,0x1256, 
    0x1258,0x1258, 0x125a,0x125d, 0x1260,0x1288, 0x128a,0x128d, 0x1290,0x12b0, 0x12b2,0x12b5, 0x12b8,0x12be, 0x12c0,0x12c0, 
    0x12c2,0x12c5, 0x12c8,0x12d6, 0x12d8,0x1310, 0x1312,0x1315, 0x1318,0x135a, 0x1380,0x138f, 0x1401,0x166c, 0x166f,0x167f, 
    0x1681,0x169a, 0x16a0,0x16ea, 0x16f1,0x16f8, 0x1700,0x1711, 0x171f,0x1731, 0x1740,0x1751, 0x1760,0x176c, 0x176e,0x1770, 
    0x1780,0x17b3, 0x17dc,0x17dc, 0x1820,0x1842, 0x1844,0x1878, 0x1880,0x1884, 0x1887,0x18a8, 0x18aa,0x18aa, 0x18b0,0x18f5, 
    0x1900,0x191e, 0x1950,0x196d, 0x1970,0x1974, 0x1980,0x19ab, 0x19b0,0x19c9, 0x1a00,0x1a16, 0x1a20,0x1a54, 0x1b05,0x1b33, 
    0x1b45,0x1b4c, 0x1b83,0x1ba0, 0x1bae,0x1baf, 0x1bba,0x1be5, 0x1c00,0x1c23, 0x1c4d,0x1c4f, 0x1c5a,0x1c77, 0x1ce9,0x1cec, 
    0x1cee,0x1cf3, 0x1cf5,0x1cf6, 0x1cfa,0x1cfa, 0x2135,0x2138, 0x2d30,0x2d67, 0x2d80,0x2d96, 0x2da0,0x2da6, 0x2da8,0x2dae, 
    0x2db0,0x2db6, 0x2db8,0x2dbe, 0x2dc0,0x2dc6, 0x2dc8,0x2dce, 0x2dd0,0x2dd6, 0x2dd8,0x2dde, 0x3006,0x3006, 0x303c,0x303c, 
    0x3041,0x3096, 0x309f,0x309f, 0x30a1,0x30fa, 0x30ff,0x30ff, 0x3105,0x312f, 0x3131,0x318e, 0x31a0,0x31bf, 0x31f0,0x31ff, 
    0x3400,0x4dbf, 0x4e00,0xa014, 0xa016,0xa48c, 0xa4d0,0xa4f7, 0xa500,0xa60b, 0xa610,0xa61f, 0xa62a,0xa62b, 0xa66e,0xa66e, 
    0xa6a0,0xa6e5, 0xa78f,0xa78f, 0xa7f7,0xa7f7, 0xa7fb,0xa801, 0xa803,0xa805, 0xa807,0xa80a, 0xa80c,0xa822, 0xa840,0xa873, 
    0xa882,0xa8b3, 0xa8f2,0xa8f7, 0xa8fb,0xa8fb, 0xa8fd,0xa8fe, 0xa90a,0xa925, 0xa930,0xa946, 0xa960,0xa97c, 0xa984,0xa9b2, 
    0xa9e0,0xa9e4, 0xa9e7,0xa9ef, 0xa9fa,0xa9fe, 0xaa00,0xaa28, 0xaa40,0xaa42, 0xaa44,0xaa4b, 0xaa60,0xaa6f, 0xaa71,0xaa76, 
    0xaa7a,0xaa7a, 0xaa7e,0xaaaf, 0xaab1,0xaab1, 0xaab5,0xaab6, 0xaab9,0xaabd, 0xaac0,0xaac0, 0xaac2,0xaac2, 0xaadb,0xaadc, 
    0xaae0,0xaaea, 0xaaf2,0xaaf2, 0xab01,0xab06, 0xab09,0xab0e, 0xab11,0xab16, 0xab20,0xab26, 0xab28,0xab2e, 0xabc0,0xabe2, 
    0xac00,0xd7a3, 0xd7b0,0xd7c6, 0xd7cb,0xd7fb, 0xf900,0xfa6d, 0xfa70,0xfad9, 0xfb1d,0xfb1d, 0xfb1f,0xfb28, 0xfb2a,0xfb36, 
    0xfb38,0xfb3c, 0xfb3e,0xfb3e, 0xfb40,0xfb41, 0xfb43,0xfb44, 0xfb46,0xfbb1, 0xfbd3,0xfd3d, 0xfd50,0xfd8f, 0xfd92,0xfdc7, 
    0xfdf0,0xfdfb, 0xfe70,0xfe74, 0xfe76,0xfefc, 0xff66,0xff6f, 0xff71,0xff9d, 0xffa0,0xffbe, 0xffc2,0xffc7, 0xffca,0xffcf, 
    0xffd2,0xffd7, 0xffda,0xffdc, 0x10000,0x1000b, 0x1000d,0x10026, 0x10028,0x1003a, 0x1003c,0x1003d, 0x1003f,0x1004d, 0x10050,0x1005d, 
    0x10080,0x100fa, 0x10280,0x1029c, 0x102a0,0x102d0, 0x10300,0x1031f, 0x1032d,0x10340, 0x10342,0x10349, 0x10350,0x10375, 0x10380,0x1039d, 
    0x103a0,0x103c3, 0x103c8,0x103cf, 0x10450,0x1049d, 0x10500,0x10527, 0x10530,0x10563, 0x105c0,0x105f3, 0x10600,0x10736, 0x10740,0x10755, 
    0x10760,0x10767, 0x10800,0x10805, 0x10808,0x10808, 0x1080a,0x10835, 0x10837,0x10838, 0x1083c,0x1083c, 0x1083f,0x10855, 0x10860,0x10876, 
    0x10880,0x1089e, 0x108e0,0x108f2, 0x108f4,0x108f5, 0x10900,0x10915, 0x10920,0x10939, 0x10980,0x109b7, 0x109be,0x109bf, 0x10a00,0x10a00, 
    0x10a10,0x10a13, 0x10a15,0x10a17, 0x10a19,0x10a35, 0x10a60,0x10a7c, 0x10a80,0x10a9c, 0x10ac0,0x10ac7, 0x10ac9,0x10ae4, 0x10b00,0x10b35, 
    0x10b40,0x10b55, 0x10b60,0x10b72, 0x10b80,0x10b91, 0x10c00,0x10c48, 0x10d00,0x10d23, 0x10d4a,0x10d4d, 0x10d4f,0x10d4f, 0x10e80,0x10ea9, 
    0x10eb0,0x10eb1, 0x10ec2,0x10ec4, 0x10f00,0x10f1c, 0x10f27,0x10f27, 0x10f30,0x10f45, 0x10f70,0x10f81, 0x10fb0,0x10fc4, 0x10fe0,0x10ff6, 
    0x11003,0x11037, 0x11071,0x11072, 0x11075,0x11075, 0x11083,0x110af, 0x110d0,0x110e8, 0x11103,0x11126, 0x11144,0x11144, 0x11147,0x11147, 
    0x11150,0x11172, 0x11176,0x11176, 0x11183,0x111b2, 0x111c1,0x111c4, 0x111da,0x111da, 0x111dc,0x111dc, 0x11200,0x11211, 0x11213,0x1122b, 
    0x1123f,0x11240, 0x11280,0x11286, 0x11288,0x11288, 0x1128a,0x1128d, 0x1128f,0x1129d, 0x1129f,0x112a8, 0x112b0,0x112de, 0x11305,0x1130c, 
    0x1130f,0x11310, 0x11313,0x11328, 0x1132a,0x11330, 0x11332,0x11333, 0x11335,0x11339, 0x1133d,0x1133d, 0x11350,0x11350, 0x1135d,0x11361, 
    0x11380,0x11389, 0x1138b,0x1138b, 0x1138e,0x1138e, 0x11390,0x113b5, 0x113b7,0x113b7, 0x113d1,0x113d1, 0x113d3,0x113d3, 0x11400,0x11434, 
    0x11447,0x1144a, 0x1145f,0x11461, 0x11480,0x114af, 0x114c4,0x114c5, 0x114c7,0x114c7, 0x11580,0x115ae, 0x115d8,0x115db, 0x11600,0x1162f, 
    0x11644,0x11644, 0x11680,0x116aa, 0x116b8,0x116b8, 0x11700,0x1171a, 0x11740,0x11746, 0x11800,0x1182b, 0x118ff,0x11906, 0x11909,0x11909, 
    0x1190c,0x11913, 0x11915,0x11916, 0x11918,0x1192f, 0x1193f,0x1193f, 0x11941,0x11941, 0x119a0,0x119a7, 0x119aa,0x119d0, 0x119e1,0x119e1, 
    0x119e3,0x119e3, 0x11a00,0x11a00, 0x11a0b,0x11a32, 0x11a3a,0x11a3a, 0x11a50,0x11a50, 0x11a5c,0x11a89, 0x11a9d,0x11a9d, 0x11ab0,0x11af8, 
    0x11bc0,0x11be0, 0x11c00,0x11c08, 0x11c0a,0x11c2e, 0x11c40,0x11c40, 0x11c72,0x11c8f, 0x11d00,0x11d06, 0x11d08,0x11d09, 0x11d0b,0x11d30, 
    0x11d46,0x11d46, 0x11d60,0x11d65, 0x11d67,0x11d68, 0x11d6a,0x11d89, 0x11d98,0x11d98, 0x11ee0,0x11ef2, 0x11f02,0x11f02, 0x11f04,0x11f10, 
    0x11f12,0x11f33, 0x11fb0,0x11fb0, 0x12000,0x12399, 0x12480,0x12543, 0x12f90,0x12ff0, 0x13000,0x1342f, 0x13441,0x13446, 0x13460,0x143fa, 
    0x14400,0x14646, 0x16100,0x1611d, 0x16800,0x16a38, 0x16a40,0x16a5e, 0x16a70,0x16abe, 0x16ad0,0x16aed, 0x16b00,0x16b2f, 0x16b63,0x16b77, 
    0x16b7d,0x16b8f, 0x16d43,0x16d6a, 0x16f00,0x16f4a, 0x16f50,0x16f50, 0x17000,0x187f7, 0x18800,0x18cd5, 0x18cff,0x18d08, 0x1b000,0x1b122, 
    0x1b132,0x1b132, 0x1b150,0x1b152, 0x1b155,0x1b155, 0x1b164,0x1b167, 0x1b170,0x1b2fb, 0x1bc00,0x1bc6a, 0x1bc70,0x1bc7c, 0x1bc80,0x1bc88, 
    0x1bc90,0x1bc99, 0x1df0a,0x1df0a, 0x1e100,0x1e12c, 0x1e14e,0x1e14e, 0x1e290,0x1e2ad, 0x1e2c0,0x1e2eb, 0x1e4d0,0x1e4ea, 0x1e5d0,0x1e5ed, 
    0x1e5f0,0x1e5f0, 0x1e7e0,0x1e7e6, 0x1e7e8,0x1e7eb, 0x1e7ed,0x1e7ee, 0x1e7f0,0x1e7fe, 0x1e800,0x1e8c4, 0x1ee00,0x1ee03, 0x1ee05,0x1ee1f, 
    0x1ee21,0x1ee22, 0x1ee24,0x1ee24, 0x1ee27,0x1ee27, 0x1ee29,0x1ee32, 0x1ee34,0x1ee37, 0x1ee39,0x1ee39, 0x1ee3b,0x1ee3b, 0x1ee42,0x1ee42, 
    0x1ee47,0x1ee47, 0x1ee49,0x1ee49, 0x1ee4b,0x1ee4b, 0x1ee4d,0x1ee4f, 0x1ee51,0x1ee52, 0x1ee54,0x1ee54, 0x1ee57,0x1ee57, 0x1ee59,0x1ee59, 
    0x1ee5b,0x1ee5b, 0x1ee5d,0x1ee5d, 0x1ee5f,0x1ee5f, 0x1ee61,0x1ee62, 0x1ee64,0x1ee64, 0x1ee67,0x1ee6a, 0x1ee6c,0x1ee72, 0x1ee74,0x1ee77, 
    0x1ee79,0x1ee7c, 0x1ee7e,0x1ee7e, 0x1ee80,0x1ee89, 0x1ee8b,0x1ee9b, 0x1eea1,0x1eea3, 0x1eea5,0x1eea9, 0x1eeab,0x1eebb, 0x20000,0x2a6df, 
    0x2a700,0x2b739, 0x2b740,0x2b81d, 0x2b820,0x2cea1, 0x2ceb0,0x2ebe0, 0x2ebf0,0x2ee5d, 0x2f800,0x2fa1d, 0x30000,0x3134a, 0x31350,0x323af, 
};//UNICODE_RANGE_OTHER_LETTER - Lo

Unicode_Range UNICODE_RANGE_DECIMAL_NUMBER[71] = { //Nd
    0x0030,0x0039, 0x0660,0x0669, 0x06f0,0x06f9, 0x07c0,0x07c9, 0x0966,0x096f, 0x09e6,0x09ef, 0x0a66,0x0a6f, 0x0ae6,0x0aef, 
    0x0b66,0x0b6f, 0x0be6,0x0bef, 0x0c66,0x0c6f, 0x0ce6,0x0cef, 0x0d66,0x0d6f, 0x0de6,0x0def, 0x0e50,0x0e59, 0x0ed0,0x0ed9, 
    0x0f20,0x0f29, 0x1040,0x1049, 0x1090,0x1099, 0x17e0,0x17e9, 0x1810,0x1819, 0x1946,0x194f, 0x19d0,0x19d9, 0x1a80,0x1a89, 
    0x1a90,0x1a99, 0x1b50,0x1b59, 0x1bb0,0x1bb9, 0x1c40,0x1c49, 0x1c50,0x1c59, 0xa620,0xa629, 0xa8d0,0xa8d9, 0xa900,0xa909, 
    0xa9d0,0xa9d9, 0xa9f0,0xa9f9, 0xaa50,0xaa59, 0xabf0,0xabf9, 0xff10,0xff19, 0x104a0,0x104a9, 0x10d30,0x10d39, 0x10d40,0x10d49, 
    0x11066,0x1106f, 0x110f0,0x110f9, 0x11136,0x1113f, 0x111d0,0x111d9, 0x112f0,0x112f9, 0x11450,0x11459, 0x114d0,0x114d9, 0x11650,0x11659, 
    0x116c0,0x116c9, 0x116d0,0x116e3, 0x11730,0x11739, 0x118e0,0x118e9, 0x11950,0x11959, 0x11bf0,0x11bf9, 0x11c50,0x11c59, 0x11d50,0x11d59, 
    0x11da0,0x11da9, 0x11f50,0x11f59, 0x16130,0x16139, 0x16a60,0x16a69, 0x16ac0,0x16ac9, 0x16b50,0x16b59, 0x16d70,0x16d79, 0x1ccf0,0x1ccf9, 
    0x1d7ce,0x1d7ff, 0x1e140,0x1e149, 0x1e2f0,0x1e2f9, 0x1e4f0,0x1e4f9, 0x1e5f1,0x1e5fa, 0x1e950,0x1e959, 0x1fbf0,0x1fbf9, 
};//UNICODE_RANGE_DECIMAL_NUMBER - Nd

Unicode_Range UNICODE_RANGE_LETTER_NUMBER[12] = { //Nl
    0x16ee,0x16f0, 0x2160,0x2182, 0x2185,0x2188, 0x3007,0x3007, 0x3021,0x3029, 0x3038,0x303a, 0xa6e6,0xa6ef, 0x10140,0x10174, 
    0x10341,0x10341, 0x1034a,0x1034a, 0x103d1,0x103d5, 0x12400,0x1246e, 
};//UNICODE_RANGE_LETTER_NUMBER - Nl

Unicode_Range UNICODE_RANGE_ALPHABETIC[601] = { //Cn,Lu,Ll,Lt,Lm,Lo
    0x0041,0x005a, 0x0061,0x007a, 0x00aa,0x00aa, 0x00b5,0x00b5, 0x00ba,0x00ba, 0x00c0,0x00d6, 0x00d8,0x00f6, 0x00f8,0x02c1, 
    0x02c6,0x02d1, 0x02e0,0x02e4, 0x02ec,0x02ec, 0x02ee,0x02ee, 0x0370,0x0374, 0x0376,0x037d, 0x037f,0x0383, 0x0386,0x0386, 
    0x0388,0x03f5, 0x03f7,0x0481, 0x048a,0x0559, 0x0560,0x0588, 0x058b,0x058c, 0x0590,0x0590, 0x05c8,0x05f2, 0x05f5,0x05ff, 
    0x0620,0x064a, 0x066e,0x066f, 0x0671,0x06d3, 0x06d5,0x06d5, 0x06e5,0x06e6, 0x06ee,0x06ef, 0x06fa,0x06fc, 0x06ff,0x06ff, 
    0x070e,0x070e, 0x0710,0x0710, 0x0712,0x072f, 0x074b,0x07a5, 0x07b1,0x07bf, 0x07ca,0x07ea, 0x07f4,0x07f5, 0x07fa,0x07fc, 
    0x0800,0x0815, 0x081a,0x081a, 0x0824,0x0824, 0x0828,0x0828, 0x082e,0x082f, 0x083f,0x0858, 0x085c,0x085d, 0x085f,0x0887, 
    0x0889,0x088f, 0x0892,0x0896, 0x08a0,0x08c9, 0x0904,0x0939, 0x093d,0x093d, 0x0950,0x0950, 0x0958,0x0961, 0x0971,0x0980, 
    0x0984,0x09bb, 0x09bd,0x09bd, 0x09c5,0x09c6, 0x09c9,0x09ca, 0x09ce,0x09d6, 0x09d8,0x09e1, 0x09e4,0x09e5, 0x09f0,0x09f1, 
    0x09fc,0x09fc, 0x09ff,0x0a00, 0x0a04,0x0a3b, 0x0a3d,0x0a3d, 0x0a43,0x0a46, 0x0a49,0x0a4a, 0x0a4e,0x0a50, 0x0a52,0x0a65, 
    0x0a72,0x0a74, 0x0a77,0x0a80, 0x0a84,0x0abb, 0x0abd,0x0abd, 0x0ac6,0x0ac6, 0x0aca,0x0aca, 0x0ace,0x0ae1, 0x0ae4,0x0ae5, 
    0x0af2,0x0af9, 0x0b00,0x0b00, 0x0b04,0x0b3b, 0x0b3d,0x0b3d, 0x0b45,0x0b46, 0x0b49,0x0b4a, 0x0b4e,0x0b54, 0x0b58,0x0b61, 
    0x0b64,0x0b65, 0x0b71,0x0b71, 0x0b78,0x0b81, 0x0b83,0x0bbd, 0x0bc3,0x0bc5, 0x0bc9,0x0bc9, 0x0bce,0x0bd6, 0x0bd8,0x0be5, 
    0x0bfb,0x0bff, 0x0c05,0x0c3b, 0x0c3d,0x0c3d, 0x0c45,0x0c45, 0x0c49,0x0c49, 0x0c4e,0x0c54, 0x0c57,0x0c61, 0x0c64,0x0c65, 
    0x0c70,0x0c76, 0x0c80,0x0c80, 0x0c85,0x0cbb, 0x0cbd,0x0cbd, 0x0cc5,0x0cc5, 0x0cc9,0x0cc9, 0x0cce,0x0cd4, 0x0cd7,0x0ce1, 
    0x0ce4,0x0ce5, 0x0cf0,0x0cf2, 0x0cf4,0x0cff, 0x0d04,0x0d3a, 0x0d3d,0x0d3d, 0x0d45,0x0d45, 0x0d49,0x0d49, 0x0d4e,0x0d4e, 
    0x0d50,0x0d56, 0x0d5f,0x0d61, 0x0d64,0x0d65, 0x0d7a,0x0d80, 0x0d84,0x0dc9, 0x0dcb,0x0dce, 0x0dd5,0x0dd5, 0x0dd7,0x0dd7, 
    0x0de0,0x0de5, 0x0df0,0x0df1, 0x0df5,0x0e30, 0x0e32,0x0e33, 0x0e3b,0x0e3e, 0x0e40,0x0e46, 0x0e5c,0x0eb0, 0x0eb2,0x0eb3, 
    0x0ebd,0x0ec7, 0x0ecf,0x0ecf, 0x0eda,0x0f00, 0x0f40,0x0f70, 0x0f88,0x0f8c, 0x0f98,0x0f98, 0x0fbd,0x0fbd, 0x0fcd,0x0fcd, 
    0x0fdb,0x102a, 0x103f,0x103f, 0x1050,0x1055, 0x105a,0x105d, 0x1061,0x1061, 0x1065,0x1066, 0x106e,0x1070, 0x1075,0x1081, 
    0x108e,0x108e, 0x10a0,0x10fa, 0x10fc,0x135c, 0x137d,0x138f, 0x139a,0x13ff, 0x1401,0x166c, 0x166f,0x167f, 0x1681,0x169a, 
    0x169d,0x16ea, 0x16f1,0x1711, 0x1716,0x1731, 0x1737,0x1751, 0x1754,0x1771, 0x1774,0x17b3, 0x17d7,0x17d7, 0x17dc,0x17dc, 
    0x17de,0x17df, 0x17ea,0x17ef, 0x17fa,0x17ff, 0x181a,0x1884, 0x1887,0x18a8, 0x18aa,0x191f, 0x192c,0x192f, 0x193c,0x193f, 
    0x1941,0x1943, 0x1950,0x19cf, 0x19db,0x19dd, 0x1a00,0x1a16, 0x1a1c,0x1a1d, 0x1a20,0x1a54, 0x1a5f,0x1a5f, 0x1a7d,0x1a7e, 
    0x1a8a,0x1a8f, 0x1a9a,0x1a9f, 0x1aa7,0x1aa7, 0x1aae,0x1aaf, 0x1acf,0x1aff, 0x1b05,0x1b33, 0x1b45,0x1b4d, 0x1b83,0x1ba0, 
    0x1bae,0x1baf, 0x1bba,0x1be5, 0x1bf4,0x1bfb, 0x1c00,0x1c23, 0x1c38,0x1c3a, 0x1c4a,0x1c4f, 0x1c5a,0x1c7d, 0x1c80,0x1cbf, 
    0x1cc8,0x1ccf, 0x1ce9,0x1cec, 0x1cee,0x1cf3, 0x1cf5,0x1cf6, 0x1cfa,0x1dbf, 0x1e00,0x1fbc, 0x1fbe,0x1fbe, 0x1fc2,0x1fcc, 
    0x1fd0,0x1fdc, 0x1fe0,0x1fec, 0x1ff0,0x1ffc, 0x1fff,0x1fff, 0x2065,0x2065, 0x2071,0x2073, 0x207f,0x207f, 0x208f,0x209f, 
    0x20c1,0x20cf, 0x20f1,0x20ff, 0x2102,0x2102, 0x2107,0x2107, 0x210a,0x2113, 0x2115,0x2115, 0x2119,0x211d, 0x2124,0x2124, 
    0x2126,0x2126, 0x2128,0x2128, 0x212a,0x212d, 0x212f,0x2139, 0x213c,0x213f, 0x2145,0x2149, 0x214e,0x214e, 0x2183,0x2184, 
    0x218c,0x218f, 0x242a,0x243f, 0x244b,0x245f, 0x2b74,0x2b75, 0x2b96,0x2b96, 0x2c00,0x2ce4, 0x2ceb,0x2cee, 0x2cf2,0x2cf8, 
    0x2d00,0x2d6f, 0x2d71,0x2d7e, 0x2d80,0x2ddf, 0x2e2f,0x2e2f, 0x2e5e,0x2e7f, 0x2e9a,0x2e9a, 0x2ef4,0x2eff, 0x2fd6,0x2fef, 
    0x3005,0x3006, 0x3031,0x3035, 0x303b,0x303c, 0x3040,0x3098, 0x309d,0x309f, 0x30a1,0x30fa, 0x30fc,0x318f, 0x31a0,0x31bf, 
    0x31e6,0x31ee, 0x31f0,0x31ff, 0x321f,0x321f, 0x3400,0x4dbf, 0x4e00,0xa48f, 0xa4c7,0xa4fd, 0xa500,0xa60c, 0xa610,0xa61f, 
    0xa62a,0xa66e, 0xa67f,0xa69d, 0xa6a0,0xa6e5, 0xa6f8,0xa6ff, 0xa717,0xa71f, 0xa722,0xa788, 0xa78b,0xa801, 0xa803,0xa805, 
    0xa807,0xa80a, 0xa80c,0xa822, 0xa82d,0xa82f, 0xa83a,0xa873, 0xa878,0xa87f, 0xa882,0xa8b3, 0xa8c6,0xa8cd, 0xa8da,0xa8df, 
    0xa8f2,0xa8f7, 0xa8fb,0xa8fb, 0xa8fd,0xa8fe, 0xa90a,0xa925, 0xa930,0xa946, 0xa954,0xa95e, 0xa960,0xa97f, 0xa984,0xa9b2, 
    0xa9ce,0xa9cf, 0xa9da,0xa9dd, 0xa9e0,0xa9e4, 0xa9e6,0xa9ef, 0xa9fa,0xaa28, 0xaa37,0xaa42, 0xaa44,0xaa4b, 0xaa4e,0xaa4f, 
    0xaa5a,0xaa5b, 0xaa60,0xaa76, 0xaa7a,0xaa7a, 0xaa7e,0xaaaf, 0xaab1,0xaab1, 0xaab5,0xaab6, 0xaab9,0xaabd, 0xaac0,0xaac0, 
    0xaac2,0xaadd, 0xaae0,0xaaea, 0xaaf2,0xaaf4, 0xaaf7,0xab5a, 0xab5c,0xab69, 0xab6c,0xabe2, 0xabee,0xabef, 0xabfa,0xd7ff, 
    0xf900,0xfb1d, 0xfb1f,0xfb28, 0xfb2a,0xfbb1, 0xfbc3,0xfd3d, 0xfd50,0xfdce, 0xfdd0,0xfdfb, 0xfe1a,0xfe1f, 0xfe53,0xfe53, 
    0xfe67,0xfe67, 0xfe6c,0xfefe, 0xff00,0xff00, 0xff21,0xff3a, 0xff41,0xff5a, 0xff66,0xffdf, 0xffe7,0xffe7, 0xffef,0xfff8, 
    0xfffe,0x100ff, 0x10103,0x10106, 0x10134,0x10136, 0x1018f,0x1018f, 0x1019d,0x1019f, 0x101a1,0x101cf, 0x101fe,0x102df, 0x102fc,0x1031f, 
    0x10324,0x10340, 0x10342,0x10349, 0x1034b,0x10375, 0x1037b,0x1039e, 0x103a0,0x103cf, 0x103d6,0x1049f, 0x104aa,0x1056e, 0x10570,0x10856, 
    0x10860,0x10876, 0x10880,0x108a6, 0x108b0,0x108fa, 0x10900,0x10915, 0x1091c,0x1091e, 0x10920,0x1093e, 0x10940,0x109bb, 0x109be,0x109bf, 
    0x109d0,0x109d1, 0x10a00,0x10a00, 0x10a04,0x10a04, 0x10a07,0x10a0b, 0x10a10,0x10a37, 0x10a3b,0x10a3e, 0x10a49,0x10a4f, 0x10a59,0x10a7c, 
    0x10a80,0x10a9c, 0x10aa0,0x10ac7, 0x10ac9,0x10ae4, 0x10ae7,0x10aea, 0x10af7,0x10b38, 0x10b40,0x10b57, 0x10b60,0x10b77, 0x10b80,0x10b98, 
    0x10b9d,0x10ba8, 0x10bb0,0x10cf9, 0x10d00,0x10d23, 0x10d28,0x10d2f, 0x10d3a,0x10d3f, 0x10d4a,0x10d68, 0x10d6f,0x10d8d, 0x10d90,0x10e5f, 
    0x10e7f,0x10eaa, 0x10eae,0x10efb, 0x10f00,0x10f1c, 0x10f27,0x10f45, 0x10f5a,0x10f81, 0x10f8a,0x10fc4, 0x10fcc,0x10fff, 0x11003,0x11037, 
    0x1104e,0x11051, 0x11071,0x11072, 0x11075,0x1107e, 0x11083,0x110af, 0x110c3,0x110cc, 0x110ce,0x110ef, 0x110fa,0x110ff, 0x11103,0x11126, 
    0x11135,0x11135, 0x11144,0x11144, 0x11147,0x11172, 0x11176,0x1117f, 0x11183,0x111b2, 0x111c1,0x111c4, 0x111da,0x111da, 0x111dc,0x111dc, 
    0x111e0,0x111e0, 0x111f5,0x1122b, 0x1123f,0x11240, 0x11242,0x112a8, 0x112aa,0x112de, 0x112eb,0x112ef, 0x112fa,0x112ff, 0x11304,0x1133a, 
    0x1133d,0x1133d, 0x11345,0x11346, 0x11349,0x1134a, 0x1134e,0x11356, 0x11358,0x11361, 0x11364,0x11365, 0x1136d,0x1136f, 0x11375,0x113b7, 
    0x113c1,0x113c1, 0x113c3,0x113c4, 0x113c6,0x113c6, 0x113cb,0x113cb, 0x113d1,0x113d1, 0x113d3,0x113d3, 0x113d6,0x113d6, 0x113d9,0x113e0, 
    0x113e3,0x11434, 0x11447,0x1144a, 0x1145c,0x1145c, 0x1145f,0x114af, 0x114c4,0x114c5, 0x114c7,0x114cf, 0x114da,0x115ae, 0x115b6,0x115b7, 
    0x115d8,0x115db, 0x115de,0x1162f, 0x11644,0x1164f, 0x1165a,0x1165f, 0x1166d,0x116aa, 0x116b8,0x116b8, 0x116ba,0x116bf, 0x116ca,0x116cf, 
    0x116e4,0x1171c, 0x1172c,0x1172f, 0x11740,0x1182b, 0x1183c,0x118df, 0x118f3,0x1192f, 0x11936,0x11936, 0x11939,0x1193a, 0x1193f,0x1193f, 
    0x11941,0x11941, 0x11947,0x1194f, 0x1195a,0x119d0, 0x119d8,0x119d9, 0x119e1,0x119e1, 0x119e3,0x119e3, 0x119e5,0x11a00, 0x11a0b,0x11a32, 
    0x11a3a,0x11a3a, 0x11a48,0x11a50, 0x11a5c,0x11a89, 0x11a9d,0x11a9d, 0x11aa3,0x11aff, 0x11b0a,0x11be0, 0x11be2,0x11bef, 0x11bfa,0x11c2e, 
    0x11c37,0x11c37, 0x11c40,0x11c40, 0x11c46,0x11c4f, 0x11c6d,0x11c6f, 0x11c72,0x11c91, 0x11ca8,0x11ca8, 0x11cb7,0x11d30, 0x11d37,0x11d39, 
    0x11d3b,0x11d3b, 0x11d3e,0x11d3e, 0x11d46,0x11d46, 0x11d48,0x11d4f, 0x11d5a,0x11d89, 0x11d8f,0x11d8f, 0x11d92,0x11d92, 0x11d98,0x11d9f, 
    0x11daa,0x11ef2, 0x11ef9,0x11eff, 0x11f02,0x11f02, 0x11f04,0x11f33, 0x11f3b,0x11f3d, 0x11f5b,0x11fbf, 0x11ff2,0x11ffe, 0x12000,0x123ff, 
    0x1246f,0x1246f, 0x12475,0x12ff0, 0x12ff3,0x1342f, 0x13441,0x13446, 0x13456,0x1611d, 0x1613a,0x16a5f, 0x16a6a,0x16a6d, 0x16a70,0x16abf, 
    0x16aca,0x16aef, 0x16af6,0x16b2f, 0x16b40,0x16b43, 0x16b46,0x16b4f, 0x16b5a,0x16b5a, 0x16b62,0x16d6c, 0x16d7a,0x16e7f, 0x16e9b,0x16f4e, 
    0x16f50,0x16f50, 0x16f88,0x16f8e, 0x16f93,0x16fe1, 0x16fe3,0x16fe3, 0x16fe5,0x16fef, 0x16ff2,0x1bc9b, 0x1bca4,0x1cbff, 0x1ccfa,0x1ccff, 
    0x1ceb4,0x1ceff, 0x1cf2e,0x1cf2f, 0x1cf47,0x1cf4f, 0x1cfc4,0x1cfff, 0x1d0f6,0x1d0ff, 0x1d127,0x1d128, 0x1d1eb,0x1d1ff, 0x1d246,0x1d2bf, 
    0x1d2d4,0x1d2df, 0x1d2f4,0x1d2ff, 0x1d357,0x1d35f, 0x1d379,0x1d6c0, 0x1d6c2,0x1d6da, 0x1d6dc,0x1d6fa, 0x1d6fc,0x1d714, 0x1d716,0x1d734, 
    0x1d736,0x1d74e, 0x1d750,0x1d76e, 0x1d770,0x1d788, 0x1d78a,0x1d7a8, 0x1d7aa,0x1d7c2, 0x1d7c4,0x1d7cd, 0x1da8c,0x1da9a, 0x1daa0,0x1daa0, 
    0x1dab0,0x1dfff, 0x1e007,0x1e007, 0x1e019,0x1e01a, 0x1e022,0x1e022, 0x1e025,0x1e025, 0x1e02b,0x1e08e, 0x1e090,0x1e12f, 0x1e137,0x1e13f, 
    0x1e14a,0x1e14e, 0x1e150,0x1e2ad, 0x1e2af,0x1e2eb, 0x1e2fa,0x1e2fe, 0x1e300,0x1e4eb, 0x1e4fa,0x1e5ed, 0x1e5f0,0x1e5f0, 0x1e5fb,0x1e5fe, 
    0x1e600,0x1e8c6, 0x1e8d7,0x1e943, 0x1e94b,0x1e94f, 0x1e95a,0x1e95d, 0x1e960,0x1ec70, 0x1ecb5,0x1ed00, 0x1ed3e,0x1eeef, 0x1eef2,0x1efff, 
    0x1f02c,0x1f02f, 0x1f094,0x1f09f, 0x1f0af,0x1f0b0, 0x1f0c0,0x1f0c0, 0x1f0d0,0x1f0d0, 0x1f0f6,0x1f0ff, 0x1f1ae,0x1f1e5, 0x1f203,0x1f20f, 
    0x1f23c,0x1f23f, 0x1f249,0x1f24f, 0x1f252,0x1f25f, 0x1f266,0x1f2ff, 0x1f6d8,0x1f6db, 0x1f6ed,0x1f6ef, 0x1f6fd,0x1f6ff, 0x1f777,0x1f77a, 
    0x1f7da,0x1f7df, 0x1f7ec,0x1f7ef, 0x1f7f1,0x1f7ff, 0x1f80c,0x1f80f, 0x1f848,0x1f84f, 0x1f85a,0x1f85f, 0x1f888,0x1f88f, 0x1f8ae,0x1f8af, 
    0x1f8bc,0x1f8bf, 0x1f8c2,0x1f8ff, 0x1fa54,0x1fa5f, 0x1fa6e,0x1fa6f, 0x1fa7d,0x1fa7f, 0x1fa8a,0x1fa8e, 0x1fac7,0x1facd, 0x1fadd,0x1fade, 
    0x1faea,0x1faef, 0x1faf9,0x1faff, 0x1fb93,0x1fb93, 0x1fbfa,0xe0000, 0xe0002,0xe001f, 0xe0080,0xe00ff, 0xe01f0,0xeffff, 0xffffe,0xfffff, 
    0x10fffe,0x10ffff, 
};//UNICODE_RANGE_ALPHABETIC - Cn,Lu,Ll,Lt,Lm,Lo

Unicode_Range UNICODE_RANGE_SPACE[8] = { //Zs,Zl,Zp
    0x0020,0x0020, 0x00a0,0x00a0, 0x1680,0x1680, 0x2000,0x200a, 0x2028,0x2029, 0x202f,0x202f, 0x205f,0x205f, 0x3000,0x3000, 
};//UNICODE_RANGE_SPACE - Zs,Zl,Zp

#endif